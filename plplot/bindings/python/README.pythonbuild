How to build yourself a python with PLplot support
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are two possibilities for a python front-end to PLplot.  We
concentrate in the first part of this document on building a dynamically
loadable python PLplot extension module, but if you are interested in
another method which involves rebuilding python itself look in the second
part of this document below the horizontal line.

General:

swig version 1.3.17 (or above?) is a prerequisite if you are using the CVS
version of PLplot.  (Earlier versions of swig will not work because of
paradigm changes that have occurred during the unstable 1.3.x series.)
Hopefully those changes are mostly stabilized now so the question mark
may not be needed for the "(or above?)" quote above.

N.B. The tarball version of PLplot should have pre-generated versions of
plplotcmodule_p_single.c, plplotcmodule_p_double.c and plplotc.py files
which are normally generated by swig for the CVS user. Thus, the tarball
user should not need to worry about swig at all.

plplotcmodule.i, plplot.py, and plplot_widgetmodule.c are the key files used
for adding PLplot API to python.  The first of these is a swig source file
for generating either plplotcmodule_p_single.c or plplotcmodule_p_double.c
depending on whether you are building a single- or double-precision version
of libplplot.  These C files implement all the common plplot raw C API and
are used (after processing by makedocstrings.py to get the documentation
strings done properly) to make the _plplotc extension module. The other file
generated by swig is plplotc.py which wraps the _plplotc extension module.

  Note: If there is some additional plplot public C API that you feel should
  be part of the python plplot API, then it should be brought up for
  discussion on the plplot_devel list since that should probably be common
  API that is implemented for all front ends, not just the python one.

plplot.py is a python wrapper for the plplotc.py module which adds some
additional user-friendly functionality such as useful variations on argument
lists.  

plplot_widgetmodule.c adds additional python plplot functionality that is
generally useful when plplot is used as part of the pyqt or Tkinter python
widgets.

Historically we used the setup.py method of building the _plplotc extension
module (and we still keep setup.py.in in the "old" subdirectory of
the top of the source tree for reference purposes), but
our procedure for building the module now is completely autotools based.

The automake/libtool approach for generating _plplotcmodule.so, the
dynamically loadable python extension module for PLplot, has been tested
under Linux and Mac OS X (and other unices?) and works well except for the
limitation that we have not yet figured out a way to access the plframe Tk
widget from the python Tkinter environment.  The stumbling block before was
libplplot itself was not dynamically loadable from tcl/tk, but that option
is now available so there is hope that eventually we will be able to support
a Tkinter-based plframe widget in the future. Also, there is a beginnings of
a pyqt widget (try prova.py from examples/python) that does work with the
dynamically loadable approach so that may eventually get generalized to a
clone of our plframe widget (or even something more powerful).  Meanwhile,
if you absolutely must have access to the Tk plframe widget under Tkinter,
then you must use the approach in the second part of this document below the
horizontal line.

Alan W. Irwin (last updated 2002 December 31).
_________________________________________________________________________

The remainder of this document describes an alternative build approach that
does make the plframe widget available under python by rebuilding python
itself.  It makes use of the historical hand-crafted interface files
plmodule.c and plmodule2.c (now combined together in old/plmodule.c for
historical reference purposes in the the top-level source tree) and
plmodule.h (now stored in old/plmodule.h for reference purposes).
Geoffrey Furnish told us the method still worked in 2000, but the
instructions have not been updated since 1996 so there may be some changes
which you should ask him about.  This approach is based on the old
hand-crafted (as opposed to swig-generated) plmodule.c wrapper which is
no longer maintained.  Note also that the module name is pl rather than
plplot used for the swig-generated wrapper.

Configure plplot with --disable-python, and follow these steps.  This
will be a little bit of work, and you may have to think on your
feet...

1) First Build python in the usual way.  PLplot has been tested with:
	python 1.4b3
	NumPy-1.0a5
	NumPyLib-1.0a5
	Tcl 7.5
	Tk 4.1

   For least hassle, I suggest duplicating this slection of tool
   versions, and building python with both Numerical extension and Tk
   support. Note in particular that the Numerical Extension
   instructions are not quite fully detailed.  You may have to "help"
   it out a little.  At the end, you should be able to do:

	% python
	>>> from Numeric import *

   If you can do that, you are probably okay.

   Be sure to use the same --prefix when configure Tcl/Tk and Python,
   and any other packages (like maybe BLT, or whatever else you want
   to use) and install them all.  For example, use for all three
   packages: 

	% configure --prefix=$HOME/test
	% make
	% make install

2) Configure PLplot against this toolset.  Use the same --prefix when
   configuring PLplot.  For example, 

	% configure --prefix=$HOME/test --with-double --disable-python
	% make
	% make install

3) Now you are ready to hack PLplot support into python, and rebuild
   it.  Start by copying the PLplot plmodule stuff into the Python
   build tree's Modules directory.  That is the files:

	plplot/bindings/python/plmodule.c
	plplot/bindings/python/plmodule2.c
	plplot/bindings/python/plmodule.h

   And edit Python's Setup file to include plmodule.  For example, you
   could add the liine:

	pl plmodule.c plmodule2.c -DDOUBLE -I$HOME/test/include

   (Replace "$HOME/test" above with whatever prefix you gave when
   configuring python/tcl/tk/plplot).

   In order to get PLplot's plframe support, you'll also have to
   modify the tkinter module, and get PLplot's *.py Tk support files
   installed.  I suggest making a subdirectory Lib/plplot, and putting
   the plplot/bindings/python/*.py files into it.  Then edit Python's
   top level Makefile to include the plplot subdirectory in the list
   of things to install.  Search on "tkinter", and add plplot to that
   line.  If you haven't already, you'll probably want to add
   "Numeric" there as well.  Now you also need edit Setup to add the
   plplot support files to the python path, just as is done for
   Tkinter, and as ought to be done for Numeric.  Look in
   Modules/Setup at how TKPATH is handled, and do the same thing for
   PLPLOTPATH, or suchlike.

   Now you also need to change the Modules/Setup line for the _tkinter
   module to pass a flag to tell it to include PLplot support.  Here,
   is an example which tells it we have both the BLT toolkit, and
   PLplot. 

_tkinter _tkinter.c -DHAVE_BLT -DHAVE_PLPLOT -I/usr/include/X11R5 -I/home/cs/furnish/junk/include -L/home/cs/furnish/junk/lib -lplplotdtk -lMatrix -lBLT -ltk4.1 -ltcl7.5 -lX11

   (If you dont' want to use BLT, just take out the -DHAVE_BLT and the
   -lBLT.)  And be sure to edit the actual _tkinter.c itself, so that
   it recognizes HAVE_PLPLOT and will call the PLplot Tk
   initialization routine (Pltk_Init).  For example, from _tkinter.c:

#ifndef WITH_APPINIT
int
Tcl_AppInit (interp)
     Tcl_Interp *interp;
{
  Tk_Window main;

  main = Tk_MainWindow(interp);
  if (Tcl_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Tcl_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
  if (Tk_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Tk_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
#ifdef HAVE_BLT
  if (Blt_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Blt_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
#endif
#ifdef HAVE_PLPLOT
  if (Pltk_Init (interp) == TCL_ERROR) {
    fprintf(stderr, "Pltk_Init error: %s\n", interp->result);
    return TCL_ERROR;
  }
#endif
  return TCL_OK;
}

   I have put copies of a complete sample Setup and _tkinter.c from a
   build using Python-1.4b3, into the plplot/bindings/python/1.4b3
   subdirectory. 

   Now you can rebuild the python and reinstall (from Python top level
   directory):

	% make
	% make install

   At this point, you should be able to start python, import Numeric,
   import pl, and also check your sys.path to be sure that the plplot
   Tk support directory is included.

4) If you get through all that, you should be all set.  You could go
   to the python examples directory, softlink your new python in, and
   run pytkdemo.

