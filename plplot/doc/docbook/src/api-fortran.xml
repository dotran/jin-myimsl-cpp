<!--
    api-fortran.xml: "The Specialized Fortran API for PLplot" chapter

    Copyright (C) 1994  Geoffrey Furnish and Maurice LeBrun
    Copyright (C) 1999, 2000, 2001, 2002, 2003  Rafael Laboissiere
    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004  Alan W. Irwin
    Copyright (C) 2003  Joao Cardoso
    Copyright (C) 2004  Andrew Ross

    Redistribution and use in source (XML DocBook) and "compiled" forms
    (HTML, PDF, PostScript, DVI, TeXinfo and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:

       1. Redistributions of source code (XML DocBook) must retain the
          above copyright notice, this list of conditions and the following
          disclaimer as the first lines of this file unmodified.

       2. Redistributions in compiled form (transformed to other DTDs,
          converted to HTML, PDF, PostScript, and other formats) must
          reproduce the above copyright notice, this list of conditions and
          the following disclaimer in the documentation and/or other
          materials provided with the distribution.

    Important: THIS DOCUMENTATION IS PROVIDED BY THE PLPLOT PROJECT "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PLPLOT PROJECT BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<chapter id="API-FORTRAN">
  <title>The Specialized Fortran API for PLplot</title>

  <para>
  The purpose of this Chapter is to document the API for each Fortran function
  in PLplot that differs substantially (usually in argument lists)
  from the common API that has already been
  documented in <xref linkend="API"/>.
  </para>

  <para>
  Normally, the common API is wrapped in such a way for Fortran that there is
  and one-to-one correspondence between each fortran and C argument
  (see <xref linkend="fortran"/>
  for discussion).  However, for certain routines documented in this
  chapter the fortran argument lists
  necessarily differ substantially from the C versions.
  </para>

  <para>
  This chapter is incomplete and NEEDS DOCUMENTATION of, e.g., the fortran
  equivalent of the plshade C routines.
  </para>


  <sect1 id="plcon0" renderas="sect3">
    <title>
      <function>plcon0</function>: Contour plot, identity mapping for fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plcon0</function>
	</funcdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>kx</parameter></paramdef>
        <paramdef><parameter>lx</parameter></paramdef>
        <paramdef><parameter>ky</parameter></paramdef>
        <paramdef><parameter>ly</parameter></paramdef>
        <paramdef><parameter>clevel</parameter></paramdef>
        <paramdef><parameter>nlevel</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a contour plot of the data in
      <literal><parameter>z</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>]</literal>,
      using the <literal><parameter>nlevel</parameter></literal> contour
      levels specified by <literal><parameter>clevel</parameter></literal>.
      Only the region of the array from
      <literal><parameter>kx</parameter></literal> to
      <literal><parameter>lx</parameter></literal> and from
      <literal><parameter>ky</parameter></literal> to
      <literal><parameter>ly</parameter></literal> is plotted out.  See
      <xref linkend="contour-plots"/> for more information.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a vectored two-dimensional array containing data to
	    be contoured.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx, ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Physical dimensions of array
	    <literal><parameter>z</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>kx, lx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>x</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ky, ly</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>y</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>clevel</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array specifying levels at which to draw contours.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nlevel</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of contour levels to draw.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      NOTE: this function is intended for use from a Fortran caller only.
      The C user should instead call &plcont; using the built-in
      transformation function <function>pltr0</function> for the same
      capability.
    </para>
  </sect1>

  <sect1 id="plcon1" renderas="sect3">
    <title>
      <function>plcon1</function>: Contour plot, general 1-d mapping for
fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plcon1</function>
	</funcdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>kx</parameter></paramdef>
        <paramdef><parameter>lx</parameter></paramdef>
        <paramdef><parameter>ky</parameter></paramdef>
        <paramdef><parameter>ly</parameter></paramdef>
        <paramdef><parameter>clevel</parameter></paramdef>
        <paramdef><parameter>nlevel</parameter></paramdef>
        <paramdef><parameter>xg</parameter></paramdef>
        <paramdef><parameter>yg</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a contour plot of the data in
      <literal><parameter>z</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>]</literal>,
      using the <literal><parameter>nlevel</parameter></literal> contour
      levels specified by <literal><parameter>clevel</parameter></literal>.
      Only the region of the array from
      <literal><parameter>kx</parameter></literal> to
      <literal><parameter>lx</parameter></literal> and from
      <literal><parameter>ky</parameter></literal> to
      <literal><parameter>ly</parameter></literal> is plotted out.  The
      arrays <literal><parameter>xg</parameter></literal> and
      <literal><parameter>yg</parameter></literal> are used to specify the
      transformation between array indices and world coordinates.  See
      <xref linkend="contour-plots"/> for more information.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a vectored two-dimensional array containing data to
	    be contoured.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx, ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Physical dimensions of array
	    <literal><parameter>z</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>kx, lx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>x</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ky, ly</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>y</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>clevel</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array specifying levels at which to draw contours.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nlevel</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of contour levels to draw.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xg, yg</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointers to arrays which specify the transformation from array
	    indices to world coordinates.  These must be one-dimensional
	    arrays, used for a transformation of the form:
	    <literal>tx</literal> = <literal>f(x)</literal>,
	    <literal>ty</literal> = <literal>f(y)</literal>.  Function
	    values at locations between grid points are obtained via linear
	    interpolation.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      NOTE: this function is intended for use from a Fortran caller only.
      The C user should instead call &plcont; using the built-in
      transformation function <function>pltr1</function> for the same
      capability.
    </para>

  </sect1>

  <sect1 id="plcon2" renderas="sect3">
    <title>
      <function>plcon2</function>: Contour plot, general 2-d mapping for
fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plcon2</function>
	</funcdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>kx</parameter></paramdef>
        <paramdef><parameter>lx</parameter></paramdef>
        <paramdef><parameter>ky</parameter></paramdef>
        <paramdef><parameter>ly</parameter></paramdef>
        <paramdef><parameter>clevel</parameter></paramdef>
        <paramdef><parameter>nlevel</parameter></paramdef>
        <paramdef><parameter>xg</parameter></paramdef>
        <paramdef><parameter>yg</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>
    <para>
      Draws a contour plot of the data in
      <literal><parameter>z</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>]</literal>,
      using the <literal><parameter>nlevel</parameter></literal> contour
      levels specified by <literal><parameter>clevel</parameter></literal>.
      Only the region of the array from
      <literal><parameter>kx</parameter></literal> to
      <literal><parameter>lx</parameter></literal> and from
      <literal><parameter>ky</parameter></literal> to
      <literal><parameter>ly</parameter></literal> is plotted out.  The
      arrays <literal><parameter>xg</parameter></literal> and
      <literal><parameter>yg</parameter></literal> are used to specify the
      transformation between array indices and world coordinates.  See
      <xref linkend="contour-plots"/> for more information.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>z</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a vectored two-dimensional array containing data to
	    be contoured.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx, ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Physical dimensions of array
	    <literal><parameter>z</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>kx, lx</parameter> (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>x</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ky, ly</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Range of <literal>y</literal> indices to consider.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>clevel</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to array specifying levels at which to draw contours.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nlevel</parameter> (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Number of contour levels to draw.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xg, yg</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointers to arrays which specify the transformation from array
	    indices to world coordinates.  These must be two-dimensional
	    arrays, used for a transformation of the form:
	    <literal>tx</literal> = <literal>f(x, y)</literal>,
	    <literal>ty</literal> = <literal>f(x, y)</literal>.  Function
	    values at locations between grid points are obtained via linear
	    interpolation.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      NOTE: this function is intended for use from a Fortran caller only.
      The C user should instead call &plcont; using the built-in
      transformation function <function>pltr2</function> for the same
      capability.
    </para>

  </sect1>

  <sect1 id="plcontfortran" renderas="sect3">
    <title>
      <function>plcont</function>: Contour plot, fixed linear mapping for
fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plcont</function>
	</funcdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>kx</parameter></paramdef>
        <paramdef><parameter>lx</parameter></paramdef>
        <paramdef><parameter>ky</parameter></paramdef>
        <paramdef><parameter>ly</parameter></paramdef>
        <paramdef><parameter>clevel</parameter></paramdef>
        <paramdef><parameter>nlevel</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      When called from Fortran, this routine has the same effect as when
      invoked from C.  The interpretation of all parameters (see &plcont;)
      is also the same except there is no transformation function supplied
      as the last parameter.  Instead, a 6-element array specifying
      coefficients to use in the transformation is supplied via the named
      common block <literal>plplot</literal> (see code). Since this
      approach is somewhat inflexible, the user is recommended to call
      either of &plcon0;, &plcon1;, or &plcon2; instead.
    </para>

  </sect1>

  <sect1 id="plvec0" renderas="sect3">
    <title>
      <function>plvec0</function>: Vector plot, identity mapping for fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvec0</function>
	</funcdef>
        <paramdef><parameter>u</parameter></paramdef>
        <paramdef><parameter>v</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a vector plot of the data in
      <literal>(<parameter>u</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>], <parameter>v</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>])</literal>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>u, v</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a pair of vectored two-dimensional arrays containing
	    the x and y components of the vector to be plotted.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx, ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Physical dimensions of the arrays
	    <literal><parameter>u</parameter></literal> and
	    <literal><parameter>v</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>scale</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Parameter to control the scaling factor of the vectors for plotting.
             If <literal><parameter>scale</parameter> = 0</literal> then
	     the scaling factor is automatically calculated for the data.
	     If <literal><parameter>scale</parameter> &lt; 0</literal> then
	     the scaling factor is automatically calculated for the data and
             then multiplied by <literal>-<parameter>scale</parameter></literal>.
             If <literal><parameter>scale</parameter> &gt; 0</literal> then
             the scaling factor is set to <literal><parameter>scale</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      NOTE: this function is intended for use from a Fortran caller only.
      The C user should instead call &plvect; using the built-in
      transformation function <function>pltr0</function> for the same
      capability.
    </para>
  </sect1>

  <sect1 id="plvec1" renderas="sect3">
    <title>
      <function>plvec1</function>: Vector plot, general 1-d mapping for
fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvec1</function>
	</funcdef>
        <paramdef><parameter>u</parameter></paramdef>
        <paramdef><parameter>v</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
        <paramdef><parameter>xg</parameter></paramdef>
        <paramdef><parameter>yg</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Draws a vector plot of the data in
      <literal>(<parameter>u</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>], <parameter>v</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>])</literal>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>u, v</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a pair of vectored two-dimensional arrays containing
	    the x and y components of the vector to be plotted.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx, ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Physical dimensions of the arrays
	    <literal><parameter>u</parameter></literal> and
	    <literal><parameter>v</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>scale</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Parameter to control the scaling factor of the vectors for plotting.
             If <literal><parameter>scale</parameter> = 0</literal> then
	     the scaling factor is automatically calculated for the data.
	     If <literal><parameter>scale</parameter> &lt; 0</literal> then
	     the scaling factor is automatically calculated for the data and
             then multiplied by <literal>-<parameter>scale</parameter></literal>.
             If <literal><parameter>scale</parameter> &gt; 0</literal> then
             the scaling factor is set to <literal><parameter>scale</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xg, yg</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointers to arrays which specify the transformation from array
	    indices to world coordinates.  These must be one-dimensional
	    arrays, used for a transformation of the form:
	    <literal>tx</literal> = <literal>f(x)</literal>,
	    <literal>ty</literal> = <literal>f(y)</literal>.  Function
	    values at locations between grid points are obtained via linear
	    interpolation.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      NOTE: this function is intended for use from a Fortran caller only.
      The C user should instead call &plvect; using the built-in
      transformation function <function>pltr1</function> for the same
      capability.
    </para>

  </sect1>

  <sect1 id="plvec2" renderas="sect3">
    <title>
      <function>plvec2</function>: Vector plot, general 2-d mapping for
fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvec2</function>
	</funcdef>
        <paramdef><parameter>u</parameter></paramdef>
        <paramdef><parameter>v</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
        <paramdef><parameter>xg</parameter></paramdef>
        <paramdef><parameter>yg</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>
    <para>
      Draws a vector plot of the data in
      <literal>(<parameter>u</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>], <parameter>v</parameter>[<parameter>nx</parameter>][<parameter>ny</parameter>])</literal>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>u, v</parameter>
	  (<literal>PLFLT **</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to a pair of vectored two-dimensional arrays containing
	    the x and y components of the vector to be plotted.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>nx, ny</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Physical dimensions of the arrays
	    <literal><parameter>u</parameter></literal> and
	    <literal><parameter>v</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>scale</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
             Parameter to control the scaling factor of the vectors for plotting.
             If <literal><parameter>scale</parameter> = 0</literal> then
	     the scaling factor is automatically calculated for the data.
	     If <literal><parameter>scale</parameter> &lt; 0</literal> then
	     the scaling factor is automatically calculated for the data and
             then multiplied by <literal>-<parameter>scale</parameter></literal>.
             If <literal><parameter>scale</parameter> &gt; 0</literal> then
             the scaling factor is set to <literal><parameter>scale</parameter></literal>.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>xg, yg</parameter>
	  (<literal>PLFLT *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointers to arrays which specify the transformation from array
	    indices to world coordinates.  These must be two-dimensional
	    arrays, used for a transformation of the form:
	    <literal>tx</literal> = <literal>f(x, y)</literal>,
	    <literal>ty</literal> = <literal>f(x, y)</literal>.  Function
	    values at locations between grid points are obtained via linear
	    interpolation.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      NOTE: this function is intended for use from a Fortran caller only.
      The C user should instead call &plvect; using the built-in
      transformation function <function>pltr2</function> for the same
      capability.
    </para>

  </sect1>

  <sect1 id="plvectfortran" renderas="sect3">
    <title>
      <function>plvect</function>: Vector plot, fixed linear mapping for
fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plvect</function>
	</funcdef>
        <paramdef><parameter>u</parameter></paramdef>
        <paramdef><parameter>v</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>scale</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      When called from Fortran, this routine has the same effect as when
      invoked from C.  The interpretation of all parameters (see &plvect;)
      is also the same except there is no transformation function supplied
      as the last parameter.  Instead, a 6-element array specifying
      coefficients to use in the transformation is supplied via the named
      common block <literal>plplot</literal> (see code). Since this
      approach is somewhat inflexible, the user is recommended to call
      either of &plvec0;, &plvec1;, or &plvec2; instead.
    </para>

  </sect1>

  <sect1 id="plmeshfortran" renderas="sect3">
    <title>
      <function>plmesh</function>: Plot surface mesh for fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plmesh</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>opt</parameter></paramdef>
        <paramdef><parameter>mx</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      When called from Fortran, this routine has the same effect as when
      invoked from C.  The interpretation of all parameters (see &plmesh;)
      is also the same except there is an additional parameter given by:
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>mx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Length of array in x direction, for plotting subarrays.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plot3dfortran" renderas="sect3">
    <title>
      <function>plot3d</function>: Plot 3-d surface plot for fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plot3d</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>z</parameter></paramdef>
        <paramdef><parameter>nx</parameter></paramdef>
        <paramdef><parameter>ny</parameter></paramdef>
        <paramdef><parameter>opt</parameter></paramdef>
        <paramdef><parameter>side</parameter></paramdef>
        <paramdef><parameter>mx</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      When called from Fortran, this routine has the same effect as when
      invoked from C.  The interpretation of all parameters (see &plot3d;)
      is also the same except there is an additional parameter given by:
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>mx</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Length of array in x direction, for plotting subarrays.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plparseoptsfortran" renderas="sect3">
    <title>
      <function>plparseopts</function>: parse arguments for fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plparseopts</function>
	</funcdef>
        <paramdef><parameter>mode</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para> When called from Fortran, this routine has the same effect as
      when invoked from C (see &plparseopts;) except that the argument list
      just contains the parsing mode and the fortran system routines
      <function>iargc</function> and <function>getarg</function> 
      are used internally to obtain the number of arguments and
      argument values.  (Note, during configuration, the user's
      fortran compiler
      is checked to see whether it supports 
      <function>iargc</function> and <function>getarg</function>.  If it
      does not, the fortran plparseopts simply writes a warning message
      and returns.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>mode</parameter>
	  (<literal>PLINT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Parsing mode; see &plparseopts; for details.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsescfortran" renderas="sect3">
    <title>
      <function>plsesc</function>: Set the escape character for text strings
for fortran
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
        <funcdef>
           <function>plsesc</function>
        </funcdef>
        <paramdef><parameter>esc</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
    Set the escape character for text strings.  From
    Fortran it needs to be the decimal ASCII value.  Only
    selected characters are allowed to prevent the user from shooting
    himself in the foot (For example, a <quote>\</quote> isn't allowed since it conflicts with C's use
    of backslash as a character escape).  Here are the allowed escape
characters and their corresponding decimal ASCII values:
<itemizedlist>
<listitem>
<para>
  <quote>!</quote>, ASCII 33
</para>
</listitem>
<listitem>
<para>
  <quote>#</quote>, ASCII 35
</para>
</listitem>
<listitem>
<para>
  <quote>$</quote>, ASCII 36
</para>
</listitem>
<listitem>
<para>
  <quote>%</quote>, ASCII 37
</para>
</listitem>
<listitem>
<para>
  <quote>&amp;</quote>, ASCII 38
</para>
</listitem>
<listitem>
<para>
  <quote>*</quote>, ASCII 42
</para>
</listitem>
<listitem>
<para>
  <quote>@</quote>, ASCII 64
</para>
</listitem>
<listitem>
<para>
  <quote>^</quote>, ASCII 94
</para>
</listitem>
<listitem>
<para>
  <quote>~</quote>, ASCII 126
</para>
</listitem>
</itemizedlist>
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>esc</parameter>
	  (<literal>char</literal>, input)
	</term>
	<listitem>
	  <para>
            NEEDS DOCUMENTATION
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: ("plplotdoc.xml" "book" "chapter" "")
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
