<!--
    api-c.xml: "The Specialized C API for PLplot" chapter

    Copyright (C) 1994  Geoffrey Furnish and Maurice LeBrun
    Copyright (C) 1999, 2000, 2001, 2002, 2003  Alan W. Irwin
    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004  Rafael Laboissiere
    Copyright (C) 2003  Joao Cardoso

    Redistribution and use in source (XML DocBook) and "compiled" forms
    (HTML, PDF, PostScript, DVI, TeXinfo and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:

       1. Redistributions of source code (XML DocBook) must retain the
          above copyright notice, this list of conditions and the following
          disclaimer as the first lines of this file unmodified.

       2. Redistributions in compiled form (transformed to other DTDs,
          converted to HTML, PDF, PostScript, and other formats) must
          reproduce the above copyright notice, this list of conditions and
          the following disclaimer in the documentation and/or other
          materials provided with the distribution.

    Important: THIS DOCUMENTATION IS PROVIDED BY THE PLPLOT PROJECT "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PLPLOT PROJECT BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<chapter id="API-C">
  <title>The Specialized C API for PLplot</title>

  <para>
  The purpose of this chapter is to document the API for every C function
  in PLplot (other than language bindings) that
  is <emphasis>not</emphasis> part of the common API that has already been
  documented in <xref linkend="API"/>.
  </para>

  <para>
  This chapter is a work that is just starting.  There are many C functions
  in the code base that are not part of the common API, and we haven't even
  gotten to the point of listing them all.  What gets documented here now
  is whatever C-explicit code we are trying to understand at the time.
  </para>

  <sect1 id="plP_checkdriverinit" renderas="sect3">
    <title>
      <function>plP_checkdriverinit</function>: Checks to see if any
      of the specified drivers have been initialized
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plP_checkdriverinit</function>
	</funcdef>
        <paramdef><parameter>list</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para> Checks to see if any of the specified drivers have been
     initialized. Function tests a space-delimited list of driver names to
     see how many of the given drivers have been initialized, and how often.
     The return code of the function is: <literal>0</literal> if no matching
     drivers were found to have been initialized; <literal>-1</literal> if
     an error occurred allocating the internal buffer; or, a positive number
     indicating the number of streams encountered that belong to drivers on
     the provided list. This function invokes &plP_getinitdriverlist;
     internally to get a <emphasis>complete</emphasis> list of drivers that have been initialized
     in order to compare with the driver names specified in the argument list
     to &plP_checkdriverinit;.
     </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>list</parameter>
	  (<literal>char *</literal>, input)
	</term>
	<listitem>
	  <para>
	   Pointer to character string specifying a space-delimited
	   list of driver names, e.g., <literal>"bmp jpeg tiff"</literal>.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plP_getinitdriverlist" renderas="sect3">
    <title>
      <function>plP_getinitdriverlist</function>: Get the initialized-driver
      list
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plP_getinitdriverlist</function>
	</funcdef>
        <paramdef><parameter>text_buffer</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para> Get the initialized-driver list. Function returns a
    space-delimited list of the currently initialized drivers or streams. If more
    than one stream is using the same driver, then its name will be returned
    more than once. The function can be analogously thought of as also
    returning the names of the active streams.  Invoked internally by
    &plP_checkdriverinit;. </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>text_buffer</parameter>
	  (<literal>char *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Pointer to a user-allocated buffer to hold the result. The user
            must ensure the buffer is big enough to hold the result.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plabort" renderas="sect3">
    <title>
      <function>plabort</function>: Error abort
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plabort</function>
	</funcdef>
        <paramdef><parameter>message</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This routine is to be used when something goes wrong that doesn't
      require calling &plexit; but for which there is no useful recovery.
      It calls the abort handler defined via &plsabort;, does some cleanup
      and returns. The user can supply his/her own abort handler and pass it
      in via &plsabort;.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>message</parameter>
	  (<literal>char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Abort message.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plexit" renderas="sect3">
    <title>
      <function>plexit</function>: Error exit
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plexit</function>
	</funcdef>
        <paramdef><parameter>message</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      This routine is called in case an error is encountered during
      execution of a PLplot routine.  It prints the error message, tries to
      release allocated resources, calls the handler prvided by &plsexit;
      and then exits.  If cleanup needs to be done in the driver program
      then the user may want to supply his/her own exit handler and pass it
      in via &plsexit;.  This function should either call &plend; before
      exiting, or simply return.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>message</parameter>
	  (<literal>char *</literal>, input)
	</term>
	<listitem>
	  <para>
	    Error message.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plgfile" renderas="sect3">
    <title>
      <function>plgfile</function>: Get output file handle
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plgfile</function>
	</funcdef>
        <paramdef><parameter>file</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Gets the current output file handle, if applicable.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>file</parameter>
	  (<literal>FILE **</literal>, output)
	</term>
	<listitem>
	  <para>
	    File pointer to current output file.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsabort" renderas="sect3">
    <title>
      <function>plsabort</function>: Set abort handler
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsabort</function>
	</funcdef>
        <paramdef><parameter>handler</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets an optional user abort handler.  See &plabort; for details.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>handler</parameter>
	  (<literal>void (*) (char *)</literal>, input)
	</term>
	<listitem>
	  <para>
	    Error abort handler.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsexit" renderas="sect3">
    <title>
      <function>plsexit</function>: Set exit handler
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsexit</function>
	</funcdef>
        <paramdef><parameter>handler</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets an optional user exit handler.  See &plexit; for details.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>handler</parameter>
	  (<literal>int (*) (char *)</literal>, input)
	</term>
	<listitem>
	  <para>
	    Error exit handler.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="plsfile" renderas="sect3">
    <title>
      <function>plsfile</function>: Set output file handle
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>plsfile</function>
	</funcdef>
        <paramdef><parameter>file</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      Sets the current output file handle, if applicable.  If the file has
      has not been previously opened and is required by the driver, the
      user will be prompted for the file name.  This routine, if used, must
      be called before initializing PLplot.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>file</parameter>
	  (<literal>FILE *</literal>, input)
	</term>
	<listitem>
	  <para>
	    File pointer.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pltr0" renderas="sect3">
    <title>
      <function>pltr0</function>: Identity transformation for grid to world
mapping
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pltr0</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>tx</parameter></paramdef>
        <paramdef><parameter>ty</parameter></paramdef>
        <paramdef><parameter>pltr_data</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
    Identity transformation for grid to world mapping.
    This routine can be used both for &plcont; and &plshade;.
    See also <xref linkend="contour-plots-c"/> and
    <xref linkend="shade-plots-c"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    X-position in grid coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Y-position in grid coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>tx</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    X-position in world coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ty</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Y-position in world coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr_data</parameter>
	  (<literal>PLPointer</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to additional input data that is passed as an argument
	    to &plcont; or &plshade; and then on to the grid to world
	    transformation routine.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pltr1" renderas="sect3">
    <title>
      <function>pltr1</function>: Linear interpolation for grid to world
mapping using singly dimensioned coord arrays
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pltr1</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>tx</parameter></paramdef>
        <paramdef><parameter>ty</parameter></paramdef>
        <paramdef><parameter>pltr_data</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
    Linear interpolation for grid to world mapping using singly
    dimensioned coord arrays.
    This routine can be used both for &plcont; and &plshade;.
    See also <xref linkend="contour-plots-c"/> and
    <xref linkend="shade-plots-c"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    X-position in grid coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Y-position in grid coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>tx</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    X-position in world coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ty</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Y-position in world coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr_data</parameter>
	  (<literal>PLPointer</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to additional input data that is passed as an argument
	    to &plcont; or &plshade; and then on to the grid to world
	    transformation routine.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

  <sect1 id="pltr2" renderas="sect3">
    <title>
      <function>pltr2</function>: Linear interpolation for grid to world
      mapping using doubly dimensioned coord arrays (column
      dominant, as per normal C 2d arrays)
    </title>

    <para>
      <funcsynopsis>
      <funcprototype>
	<funcdef>
	  <function>pltr2</function>
	</funcdef>
        <paramdef><parameter>x</parameter></paramdef>
        <paramdef><parameter>y</parameter></paramdef>
        <paramdef><parameter>tx</parameter></paramdef>
        <paramdef><parameter>ty</parameter></paramdef>
        <paramdef><parameter>pltr_data</parameter></paramdef>
      </funcprototype>
      </funcsynopsis>
    </para>

    <para>
    Linear interpolation for grid to world mapping using doubly
    dimensioned coord arrays (column dominant, as per normal C 2d arrays).
    This routine can be used both for &plcont; and &plshade;.
    See also <xref linkend="contour-plots-c"/> and
    <xref linkend="shade-plots-c"/>.
    </para>

    <variablelist>
      <varlistentry>
	<term>
	  <parameter>x</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    X-position in grid coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>y</parameter>
	  (<literal>PLFLT</literal>, input)
	</term>
	<listitem>
	  <para>
	    Y-position in grid coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>tx</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    X-position in world coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>ty</parameter>
	  (<literal>PLFLT *</literal>, output)
	</term>
	<listitem>
	  <para>
	    Y-position in world coordinates.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>
	  <parameter>pltr_data</parameter>
	  (<literal>PLPointer</literal>, input)
	</term>
	<listitem>
	  <para>
	    Pointer to additional input data that is passed as an argument
	    to &plcont; or &plshade; and then on to the grid to world
	    transformation routine.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>

  </sect1>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: ("plplotdoc.xml" "book" "chapter" "")
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
