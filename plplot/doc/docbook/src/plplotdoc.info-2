This is info/plplotdoc.info, produced by makeinfo version 4.7 from
plplotdoc.texi.

START-INFO-DIR-ENTRY
* The PLplot Plotting Library: .   ???
END-INFO-DIR-ENTRY


File: plplotdoc.info,  Node: plfontld; Load character font,  Next: plgchr; Get character default height and current [scaled] height,  Prev: plfont; Set character font,  Up: The Common API for PLplot

16.27 plfontld: Load character font
===================================

     plfontld (set);

   Sets the character set to use for subsequent character drawing. May
be called before calling initializing PLplot.

`set'  (`PLINT', input)
     Specifies the character set to load:

        * `0': Standard character set

        * `1': Extended character set


File: plplotdoc.info,  Node: plgchr; Get character default height and current [scaled] height,  Next: plgcol0; Returns 8-bit RGB values for given color from color map0,  Prev: plfontld; Load character font,  Up: The Common API for PLplot

16.28 plgchr: Get character default height and current (scaled) height
======================================================================

     plgchr (p_def, p_ht);

   Get character default height and current (scaled) height.

`p_def'  (`PLFLT *', output)
     Pointer to default character height (mm).

`p_ht'  (`PLFLT *', output)
     Pointer to current (scaled) character height (mm).


File: plplotdoc.info,  Node: plgcol0; Returns 8-bit RGB values for given color from color map0,  Next: plgcolbg; Returns the background color [cmap0[0]] by 8-bit RGB value,  Prev: plgchr; Get character default height and current [scaled] height,  Up: The Common API for PLplot

16.29 plgcol0: Returns 8-bit RGB values for given color from color map0
=======================================================================

     plgcol0 (icol0, r, g, b);

   Returns 8-bit RGB values (-255) for given color from color map0 (see
*Note Color Map0: Color Map0.). Values are negative if an invalid color
id is given.

`icol0'  (`PLINT', input)
     Index of desired cmap0 color.

`r'  (`PLINT *', output)
     Pointer to 8-bit red value.

`g'  (`PLINT *', output)
     Pointer to 8-bit green value.

`b'  (`PLINT *', output)
     Pointer to 8-bit blue value.


File: plplotdoc.info,  Node: plgcolbg; Returns the background color [cmap0[0]] by 8-bit RGB value,  Next: plgcompression; Get the current device-compression setting,  Prev: plgcol0; Returns 8-bit RGB values for given color from color map0,  Up: The Common API for PLplot

16.30 plgcolbg: Returns the background color (cmap0[0]) by 8-bit RGB value
==========================================================================

     plgcolbg (r, g, b);

   Returns the background color (cmap0[0]) by 8-bit RGB value.

`r'  (`PLINT *', output)
     Pointer to an unsigned 8-bit integer (0-255) representing the
     degree of red in the color.

`g'  (`PLINT *', output)
     Pointer to an unsigned 8-bit integer (0-255) representing the
     degree of green in the color.

`b'  (`PLINT *', output)
     Pointer to an unsigned 8-bit integer (0-255) representing the
     degree of blue in the color.


File: plplotdoc.info,  Node: plgcompression; Get the current device-compression setting,  Next: plgdev; Get the current device [keyword] name,  Prev: plgcolbg; Returns the background color [cmap0[0]] by 8-bit RGB value,  Up: The Common API for PLplot

16.31 plgcompression: Get the current  device-compression setting
=================================================================

     plgcompression (compression);

   Get the current device-compression setting. This parameter is only
used for drivers that provide compression.

`compression'  (`PLINT *', output)
     Pointer to a variable to be filled with the current
     device-compression setting.


File: plplotdoc.info,  Node: plgdev; Get the current device [keyword] name,  Next: plgdidev; Get parameters that define current device-space window,  Prev: plgcompression; Get the current device-compression setting,  Up: The Common API for PLplot

16.32 plgdev: Get the current device (keyword) name
===================================================

     plgdev (p_dev);

   Get the current device (keyword) name. Note: you must have allocated
space for this (80 characters is safe).

`p_dev'  (`char *', output)
     Pointer to device (keyword) name string.


File: plplotdoc.info,  Node: plgdidev; Get parameters that define current device-space window,  Next: plgdiori; Get plot orientation,  Prev: plgdev; Get the current device [keyword] name,  Up: The Common API for PLplot

16.33 plgdidev: Get parameters that define current  device-space window
=======================================================================

     plgdidev (p_mar, p_aspect, p_jx, p_jy);

   Get relative margin width, aspect ratio, and relative justification
that define current device-space window.  If `plsdidev' (*note
plsdidev; Set parameters that define current device-space window::) has
not been called the default values pointed to by ``p_mar'',
``p_aspect'', ``p_jx'', and ``p_jy'' will all be 0.

`p_mar'  (`PLFLT *', output)
     Pointer to relative margin width.

`p_aspect'  (`PLFLT *', output)
     Pointer to aspect ratio.

`p_jx'  (`PLFLT *', output)
     Pointer to relative justification in x.

`p_jy'  (`PLFLT *', output)
     Pointer to relative justification in y.


File: plplotdoc.info,  Node: plgdiori; Get plot orientation,  Next: plgdiplt; Get parameters that define current plot-space window,  Prev: plgdidev; Get parameters that define current device-space window,  Up: The Common API for PLplot

16.34 plgdiori: Get plot orientation
====================================

     plgdiori (p_rot);

   Get plot orientation parameter which is multiplied by 90 degrees to
obtain the angle of rotation. Note, arbitrary rotation parameters such
as 0.2 (corresponding to 18 degrees) are possible, but the usual values
for the rotation parameter are 0., 1., 2., and 3. corresponding to 0
degrees (landscape mode), 90 degrees (portrait mode), 180 degrees
(seascape mode), and 270 degrees (upside-down mode).  If `plsdiori'
(*note plsdiori; Set plot orientation::) has not been called the
default value pointed to by ``p_rot'' will be 0.

`p_rot'  (`PLFLT *', output)
     Pointer to orientation parameter.


File: plplotdoc.info,  Node: plgdiplt; Get parameters that define current plot-space window,  Next: plgfam; Get family file parameters,  Prev: plgdiori; Get plot orientation,  Up: The Common API for PLplot

16.35 plgdiplt: Get parameters that define current  plot-space window
=====================================================================

     plgdiplt (p_xmin, p_ymin, p_xmax, p_ymax);

   Get relative minima and maxima that define current plot-space window.
If `plsdiplt' (*note plsdiplt; Set parameters that define current
plot-space window::) has not been called the default values pointed to
by ``p_xmin'', ``p_ymin'', ``p_xmax'', and ``p_ymax'' will be 0., 0.,
1., and 1.

`p_xmin'  (`PLFLT *', output)
     Pointer to relative minimum in x.

`p_ymin'  (`PLFLT *', output)
     Pointer to relative minimum in y.

`p_xmax'  (`PLFLT *', output)
     Pointer to relative maximum in x.

`p_ymax'  (`PLFLT *', output)
     Pointer to relative maximum in y.


File: plplotdoc.info,  Node: plgfam; Get family file parameters,  Next: plgfci; Get FCI [font characterization integer],  Prev: plgdiplt; Get parameters that define current plot-space window,  Up: The Common API for PLplot

16.36 plgfam: Get family file parameters
========================================

     plgfam (fam, num, bmax);

   Gets information about current family file, if familying is enabled.
See *Note Family File Output: Family File Output. for more information.

`fam'  (`PLINT *', output)
     Pointer to variable with the Boolean family flag value. If
     nonzero, familying is enabled.

`num'  (`PLINT *', output)
     Pointer to variable with the current family file number.

`bmax'  (`PLINT *', output)
     Pointer to variable with the maximum file size (in bytes) for a
     family file.


File: plplotdoc.info,  Node: plgfci; Get FCI [font characterization integer],  Next: plgfnam; Get output file name,  Prev: plgfam; Get family file parameters,  Up: The Common API for PLplot

16.37 plgfci: Get FCI (font characterization integer)
=====================================================

     plgfci (fci);

   Gets information about the current font using the FCI approach.  See
*Note FCI: FCI. for more information.

`fci'  (`PLUNICODE *', output)
     Pointer to PLUNICODE (unsigned 32-bit integer) variable which is
     updated with current FCI value.


File: plplotdoc.info,  Node: plgfnam; Get output file name,  Next: plglevel; Get the [current] run level,  Prev: plgfci; Get FCI [font characterization integer],  Up: The Common API for PLplot

16.38 plgfnam: Get output file name
===================================

     plgfnam (fnam);

   Gets the current output file name, if applicable.

`fnam'  (`char *', output)
     Pointer to file name string (a preallocated string of 80
     characters or more).


File: plplotdoc.info,  Node: plglevel; Get the [current] run level,  Next: plgpage; Get page parameters,  Prev: plgfnam; Get output file name,  Up: The Common API for PLplot

16.39 plglevel: Get the (current) run level
===========================================

     plglevel (p_level);

   Get the (current) run level. Valid settings are:

   * 0, uninitialized

   * 1, initialized

   * 2, viewport defined

   * 3, world coords defined

`p_level'  (`PLINT *', output)
     Pointer to the run level.


File: plplotdoc.info,  Node: plgpage; Get page parameters,  Next: plgra; Switch to graphics screen,  Prev: plglevel; Get the [current] run level,  Up: The Common API for PLplot

16.40 plgpage: Get page parameters
==================================

     plgpage (xp, yp, xleng, yleng, xoff, yoff);

   Gets the current page configuration. The parameters are expressed in
units that are specific to the current driver. For instance: screen
drivers will usually interpret them as number of pixels, whereas
printer drivers will usually use mm.

`xp'  (`PLFLT *', output)
     Pointer to number of pixels in x.

`yp'  (`PLFLT *', output)
     Pointer to number of pixels in y.

`xleng'  (`PLINT *', output)
     Pointer to x page length value.

`yleng'  (`PLINT *', output)
     Pointer to y page length value.

`xoff'  (`PLINT *', output)
     Pointer to x page offset.

`yoff'  (`PLINT *', output)
     Pointer to y page offset.


File: plplotdoc.info,  Node: plgra; Switch to graphics screen,  Next: plgriddata; Grid data from irregularly sampled data,  Prev: plgpage; Get page parameters,  Up: The Common API for PLplot

16.41 plgra: Switch to graphics screen
======================================

     plgra ();

   Sets an interactive device to graphics mode, used in conjunction with
`pltext' (*note pltext; Switch to text screen::) to allow graphics and
text to be interspersed. On a device which supports separate text and
graphics windows, this command causes control to be switched to the
graphics window. If already in graphics mode, this command is ignored.
It is also ignored on devices which only support a single window or use
a different method for shifting focus. See also `pltext' (*note pltext;
Switch to text screen::).


File: plplotdoc.info,  Node: plgriddata; Grid data from irregularly sampled data,  Next: plgspa; Get current subpage parameters,  Prev: plgra; Switch to graphics screen,  Up: The Common API for PLplot

16.42 plgriddata: Grid data from irregularly sampled  data
==========================================================

     plggriddata (x, y, z, npts, xg, nptsx, yg, nptsy, zg, type, data);

   Real world data is frequently irregularly sampled, but all PLplot 3D
plots require data placed in a uniform grid. This function takes
irregularly sampled data from three input arrays `x[npts]', `y[npts]',
and `z[npts]', reads the desired grid location from input arrays
`xg[nptsx]' and `yg[nptsy]', and returns the gridded data into output
array `zg[nptsx][nptsy]'. The algorithm used to grid the data is
specified with the argument `type' which can have one parameter
specified in argument `data'.

`x'  (`PLFLT *', input)
     The input `x' array.

`y'  (`PLFLT *', input)
     The input `y' array.

`z'  (`PLFLT *', input)
     The input `z' array. Each triple `x[i]', `y[i]', `z[i]' represents
     one data sample coordinates.

`npts'  (`PLINT', input)
     The number of data samples in the `x', `y' and `z' arrays.

`xg'  (`PLFLT *', input)
     The input array that specifies the grid spacing in the x
     direction. Usually `xg' has `nptsx' equaly spaced values from the
     mininum to the maximum values of the `x' input array.

`nptsx'  (`PLINT', input)
     The number of points in the `xg' array.

`yg'  (`PLFLT *', input)
     The input array that specifies the grid spacing in the y
     direction. Similar to the `xg' parameter.

`nptsy'  (`PLINT', input)
     The number of points in the `yg' array.

`sg'  (`PLFLT **', output)
     The output array, where data lies in the regular grid specified by
     `xg' and `yg.' the `zg' array must exists or be allocated by the
     user prior to the calling, and must have dimension
     `zg[nptsx][xptsy]'.

`type'  (`PLINT', input)
     The type of gridding algorithm to use, which can be:

        * `GRID_CSA': Bivariate Cubic Spline approximation

        * `GRID_DTLI': Delaunay Triangulation Linear Interpolation

        * `GRID_NNI': Natural Neighbors Interpolation

        * `GRID_NNIDW': Nearest Neighbors Inverse Distance Weighted

        * `GRID_NNLI': Nearest Neighbors Linear Interpolation

        * `GRID_NNAIDW': Nearest Neighbors Around Inverse Distance
          Weighted

     For details on the algorithm read the source file `plgridd.c'.

`data'  (`PLFLT', input)
     Some gridding algorithms require extra data, which can be
     specified through this argument. Currently, for algoritm:

        * `GRID_NNIDW', `data' specifies the number of neighbors to
          use, the lower the value, the noisier (more local) the
          approximation is.

        * `GRID_NNLI', `data' specifies what a thin triangle is, in the
          range [1. .. 2.]. High values enable the usage of very thin
          triangles for interpolation, possibly resulting in error in
          the approximation.

        * `GRID_NNI', only weights greater than `data' will be
          accepted. If 0, all weigths will be accepted.


File: plplotdoc.info,  Node: plgspa; Get current subpage parameters,  Next: plgstrm; Get current stream number,  Prev: plgriddata; Grid data from irregularly sampled data,  Up: The Common API for PLplot

16.43 plgspa: Get current subpage parameters
============================================

     plgspa (xmin, xmax, ymin, ymax);

   Gets the size of the current subpage in millimeters measured from the
bottom left hand corner of the output device page or screen. Can be
used in conjunction with `plsvpa' (*note plsvpa; Specify viewport in
absolute coordinates::) for setting the size of a viewport in absolute
coordinates (millimeters).

`xmin'  (`PLFLT *', output)
     Pointer to variable with position of left hand edge of subpage in
     millimeters.

`xmax'  (`PLFLT *', output)
     Pointer to variable with position of right hand edge of subpage in
     millimeters.

`ymin'  (`PLFLT *', output)
     Pointer to variable with position of bottom edge of subpage in
     millimeters.

`ymax'  (`PLFLT *', output)
     Pointer to variable with position of top edge of subpage in
     millimeters.


File: plplotdoc.info,  Node: plgstrm; Get current stream number,  Next: plgver; Get the current library version number,  Prev: plgspa; Get current subpage parameters,  Up: The Common API for PLplot

16.44 plgstrm: Get current stream number
========================================

     plgstrm (strm);

   Gets the number of the current output stream. See also `plsstrm'
(*note plsstrm; Set current output stream::).

`strm'  (`PLINT *', output)
     Pointer to current stream value.


File: plplotdoc.info,  Node: plgver; Get the current library version number,  Next: plgvpd; Get viewport limits in normalized device coordinates,  Prev: plgstrm; Get current stream number,  Up: The Common API for PLplot

16.45 plgver: Get the current library version number
====================================================

     plgver (p_ver);

   Get the current library version number. Note: you must have
allocated space for this (80 characters is safe).

`p_ver'  (`char *', output)
     Pointer to the current library version number.


File: plplotdoc.info,  Node: plgvpd; Get viewport limits in normalized device coordinates,  Next: plgvpw; Get viewport limits in world coordinates,  Prev: plgver; Get the current library version number,  Up: The Common API for PLplot

16.46 plgvpd: Get viewport limits in normalized device coordinates
==================================================================

     plgvpd (p_xmin, p_xmax, p_ymin, p_ymax);

   Get viewport limits in normalized device coordinates.

`p_xmin'  (`PLFLT *', output)
     Lower viewport limit of the normalized device coordinate in x.

`p_xmax'  (`PLFLT *', output)
     Upper viewport limit of the normalized device coordinate in x.

`p_ymin'  (`PLFLT *', output)
     Lower viewport limit of the normalized device coordinate in y.

`p_ymax'  (`PLFLT *', output)
     Upper viewport limit of the normalized device coordinate in y.


File: plplotdoc.info,  Node: plgvpw; Get viewport limits in world coordinates,  Next: plgxax; Get x axis parameters,  Prev: plgvpd; Get viewport limits in normalized device coordinates,  Up: The Common API for PLplot

16.47 plgvpw: Get viewport limits in world coordinates
======================================================

     plgvpw (p_xmin, p_xmax, p_ymin, p_ymax);

   Get viewport limits in world coordinates.

`p_xmin'  (`PLFLT *', output)
     Lower viewport limit of the world coordinate in x.

`p_xmax'  (`PLFLT *', output)
     Upper viewport limit of the world coordinate in x.

`p_ymin'  (`PLFLT *', output)
     Lower viewport limit of the world coordinate in y.

`p_ymax'  (`PLFLT *', output)
     Upper viewport limit of the world coordinate in y.


File: plplotdoc.info,  Node: plgxax; Get x axis parameters,  Next: plgyax; Get y axis parameters,  Prev: plgvpw; Get viewport limits in world coordinates,  Up: The Common API for PLplot

16.48 plgxax: Get x axis parameters
===================================

     plgxax (digmax, digits);

   Returns current values of the ``digmax'' and ``digits'' flags for
the x axis. ``digits'' is updated after the plot is drawn, so this
routine should only be called after the call to `plbox' (*note plbox;
Draw a box with axes; etc::) (or ` plbox3' (*note plbox3; Draw a box
with axes; etc; in 3-d::)) is complete. See *Note Annotating the
Viewport: Annotating the Viewport. for more information.

`digmax'  (`PLINT *', output)
     Pointer to variable with the maximum number of digits for the x
     axis. If nonzero, the printed label has been switched to a
     floating point representation when the number of digits exceeds
     ``digmax''.

`digits'  (`PLINT *', output)
     Pointer to variable with the actual number of digits for the
     numeric labels (x axis) from the last plot.


File: plplotdoc.info,  Node: plgyax; Get y axis parameters,  Next: plgzax; Get z axis parameters,  Prev: plgxax; Get x axis parameters,  Up: The Common API for PLplot

16.49 plgyax: Get y axis parameters
===================================

     plgyax (digmax, digits);

   Identical to `plgxax' (*note plgxax; Get x axis parameters::),
except that arguments are flags for y axis.  See the description of
`plgxax' (*note plgxax; Get x axis parameters::) for more detail.

`digmax'  (`PLINT *', output)
     Pointer to variable with the maximum number of digits for the y
     axis. If nonzero, the printed label has been switched to a
     floating point representation when the number of digits exceeds
     ``digmax''.

`digits'  (`PLINT *', output)
     Pointer to variable with the actual number of digits for the
     numeric labels (y axis) from the last plot.


File: plplotdoc.info,  Node: plgzax; Get z axis parameters,  Next: plhist; Plot a histogram from unbinned data,  Prev: plgyax; Get y axis parameters,  Up: The Common API for PLplot

16.50 plgzax: Get z axis parameters
===================================

     plgzax (digmax, digits);

   Identical to `plgxax' (*note plgxax; Get x axis parameters::),
except that arguments are flags for z axis.  See the description of
`plgxax' (*note plgxax; Get x axis parameters::) for more detail.

`digmax'  (`PLINT *', output)
     Pointer to variable with the maximum number of digits for the z
     axis. If nonzero, the printed label has been switched to a
     floating point representation when the number of digits exceeds
     ``digmax''.

`digits'  (`PLINT *', output)
     Pointer to variable with the actual number of digits for the
     numeric labels (z axis) from the last plot.


File: plplotdoc.info,  Node: plhist; Plot a histogram from unbinned data,  Next: plhlsrgb; Convert HLS color to RGB,  Prev: plgzax; Get z axis parameters,  Up: The Common API for PLplot

16.51 plhist: Plot a histogram from unbinned data
=================================================

     plhist (n, data, datmin, datmax, nbin, oldwin);

   Plots a histogram from ``n'' data points stored in the array
``data''. This routine bins the data into ``nbin'' bins equally spaced
between ``datmin'' and ``datmax'', and calls `plbin' (*note plbin; Plot
a histogram from binned data::) to draw the resulting histogram.
Parameter ``oldwin'' allows the histogram either to be plotted in an
existing window or causes `plhist' (*note plhist; Plot a histogram from
unbinned data::) to call `plenv' (*note plenv; Set up standard window
and draw box::) with suitable limits before plotting the histogram.

`n'  (`PLINT', input)
     Number of data points.

`data'  (`PLFLT *', input)
     Pointer to array with values of the ``n'' data points.

`datmin'  (`PLFLT', input)
     Left-hand edge of lowest-valued bin.

`datmax'  (`PLFLT', input)
     Right-hand edge of highest-valued bin.

`nbin'  (`PLINT', input)
     Number of (equal-sized) bins into which to divide the interval
     ``xmin'' to ``xmax''.

`oldwin'  (`PLINT', input)
     If one, the histogram is plotted in the currently-defined window,
     and if zero, `plenv' (*note plenv; Set up standard window and draw
     box::) is called automatically before plotting.


File: plplotdoc.info,  Node: plhlsrgb; Convert HLS color to RGB,  Next: plinit; Initialize PLplot,  Prev: plhist; Plot a histogram from unbinned data,  Up: The Common API for PLplot

16.52 plhlsrgb: Convert HLS color to RGB
========================================

     plhlsrgb (h, l, s, p_r, p_g, p_b);

   Convert HLS color coordinates to RGB

`h'  (`PLFLT', input)
     Hue, in degrees on the colour cone (0.0-360.0)

`l'  (`PLFLT', input)
     Lightness, expressed as a fraction of the axis of the colour cone
     (0.0-1.0)

`s'  (`PLFLT', input)
     Saturation, expressed as a fraction of the radius of the colour
     cone (0.0-1.0)

`p_r'  (`PLFLT *', output)
     Pointer to red intensity (0.0-1.0) of the colour

`p_g'  (`PLFLT *', output)
     Pointer to green intensity (0.0-1.0) of the colour

`p_b'  (`PLFLT *', output)
     Pointer to blue intensity (0.0-1.0) of the colour


File: plplotdoc.info,  Node: plinit; Initialize PLplot,  Next: pljoin; Draw a line between two points,  Prev: plhlsrgb; Convert HLS color to RGB,  Up: The Common API for PLplot

16.53 plinit: Initialize PLplot
===============================

     plinit ();

   Initializing the plotting package. The program prompts for the
device keyword or number of the desired output device. Hitting a RETURN
in response to the prompt is the same as selecting the first device.
`plinit' (*note plinit; Initialize PLplot::) will issue no prompt if
either the device was specified previously (via command line flag, the
`plsetopt' (*note plsetopt; Set any command-line option::) function, or
the `plsdev' (*note plsdev; Set the device [keyword] name::) function),
or if only one device is enabled when PLplot is installed. If subpages
have been specified, the output device is divided into `nx' by `ny'
subpages, each of which may be used independently. If `plinit' (*note
plinit; Initialize PLplot::) is called again during a program, the
previously opened file will be closed. The subroutine `pladv' (*note
pladv; Advance the [sub-]page::) is used to advance from one subpage to
the next.


File: plplotdoc.info,  Node: pljoin; Draw a line between two points,  Next: pllab; Simple routine to write labels,  Prev: plinit; Initialize PLplot,  Up: The Common API for PLplot

16.54 pljoin: Draw a line between two points
============================================

     pljoin (x1, y1, x2, y2);

   Joins the point `(`x1', `y1')' to `(`x2', `y2')'.

`x1'  (`PLFLT', input)
     x coordinate of first point.

`y1'  (`PLFLT', input)
     y coordinate of first point.

`x2'  (`PLFLT', input)
     x coordinate of second point.

`y2'  (`PLFLT', input)
     y coordinate of second point.


File: plplotdoc.info,  Node: pllab; Simple routine to write labels,  Next: pllightsource; Sets the 3D position of the light source,  Prev: pljoin; Draw a line between two points,  Up: The Common API for PLplot

16.55 pllab: Simple routine to write labels
===========================================

     pllab (xlabel, ylabel, tlabel);

   Routine for writing simple labels. Use `plmtex' (*note plmtex; Write
text relative to viewport boundaries::) for more complex labels.

`xlabel'  (`const char *', input)
     Label for horizontal axis.

`ylabel'  (`const char *', input)
     Label for vertical axis.

`tlabel'  (`const char *', input)
     Title of graph.


File: plplotdoc.info,  Node: pllightsource; Sets the 3D position of the light source,  Next: plline; Draw a line,  Prev: pllab; Simple routine to write labels,  Up: The Common API for PLplot

16.56 pllightsource: Sets the 3D position of the light source
=============================================================

     pllightsource (x, y, z);

   Sets the 3D position of the light source for use with `plsurf3d'
(*note plsurf3d; Plot shaded 3-d surface plot::).

`x'  (`PLFLT', input)
     X-coordinate of the light source.

`y'  (`PLFLT', input)
     Y-coordinate of the light source.

`z'  (`PLFLT', input)
     Z-coordinate of the light source.


File: plplotdoc.info,  Node: plline; Draw a line,  Next: plline3; Draw a line in 3 space,  Prev: pllightsource; Sets the 3D position of the light source,  Up: The Common API for PLplot

16.57 plline: Draw a line
=========================

     plline (n, x, y);

   Draws line defined by ``n'' points in ``x'' and ``y''.

`n'  (`PLINT', input)
     Number of points defining line.

`x'  (`PLFLT *', input)
     Pointer to array with x coordinates of points.

`y'  (`PLFLT *', input)
     Pointer to array with y coordinates of points.


File: plplotdoc.info,  Node: plline3; Draw a line in 3 space,  Next: pllsty; Select line style,  Prev: plline; Draw a line,  Up: The Common API for PLplot

16.58 plline3: Draw a line in 3 space
=====================================

     plline3 (n, x, y, z);

   Draws line in 3 space defined by ``n'' points in ``x'', ``y'', and
``z''.  You must first set up the viewport, the 2d viewing window (in
world coordinates), and the 3d normalized coordinate box. See `x18c.c'
for more info.

`n'  (`PLINT', input)
     Number of points defining line.

`x'  (`PLFLT *', input)
     Pointer to array with x coordinates of points.

`y'  (`PLFLT *', input)
     Pointer to array with y coordinates of points.

`z'  (`PLFLT *', input)
     Pointer to array with z coordinates of points.


File: plplotdoc.info,  Node: pllsty; Select line style,  Next: plmesh; Plot surface mesh,  Prev: plline3; Draw a line in 3 space,  Up: The Common API for PLplot

16.59 pllsty: Select line style
===============================

     pllsty (n);

   This sets the line style according to one of eight predefined
patterns (also see `plstyl' (*note plstyl; Set line style::)).

`n'  (`PLINT', input)
     Integer value between 1 and 8. Line style 1 is a continuous line,
     line style 2 is a line with short dashes and gaps, line style 3 is
     a line with long dashes and gaps, line style 4 has long dashes and
     short gaps and so on.


File: plplotdoc.info,  Node: plmesh; Plot surface mesh,  Next: plmeshc; Magnitude colored plot surface mesh with contour_,  Prev: pllsty; Select line style,  Up: The Common API for PLplot

16.60 plmesh: Plot surface mesh
===============================

     plmesh (x, y, z, nx, ny, opt);

   Plots a surface mesh within the environment set up by `plw3d' (*note
plw3d; Set up window for 3-d plotting::). The surface is defined by the
two-dimensional array ``z'[`nx'][`ny']', the point ``z'[i][j]' being the
value of the function at `(`x'[i], `y'[j])'. Note that the points in
arrays ``x'' and ``y'' do not need to be equally spaced, but must be
stored in ascending order. The parameter ``opt'' controls the way in
which the surface is displayed. For further details see *Note Three
Dimensional Surface Plots: Three Dimensional Surface Plots..

`x'  (`PLFLT *', input)
     Pointer to set of x coordinate values at which the function is
     evaluated.

`y'  (`PLFLT *', input)
     Pointer to set of y coordinate values at which the function is
     evaluated.

`z'  (`PLFLT **', input)
     Pointer to a vectored two-dimensional array with set of function
     values.

`nx'  (`PLINT', input)
     Number of ``x'' values at which function is evaluated.

`ny'  (`PLINT', input)
     Number of ``y'' values at which function is evaluated.

`opt'  (`PLINT', input)
     Determines the way in which the surface is represented:

        * ``opt'=DRAW_LINEX': Lines are drawn showing ``z'' as a
          function of ``x'' for each value of ``y'[j]'.

        * ``opt'=DRAW_LINEY': Lines are drawn showing ``z'' as a
          function of ``y'' for each value of ``x'[i]'.

        * ``opt'=DRAW_LINEXY': Network of lines is drawn connecting
          points at which function is defined.


File: plplotdoc.info,  Node: plmeshc; Magnitude colored plot surface mesh with contour_,  Next: plmkstrm; Creates a new stream and makes it the default,  Prev: plmesh; Plot surface mesh,  Up: The Common API for PLplot

16.61 plmeshc: Magnitude colored plot surface mesh with contour.
================================================================

     plmeshc (x, y, z, nx, ny, opt, clevel, nlevel);

   Identical to `plmesh' but with extra functionalities: the surface
mesh can be colored accordingly to the current z value being plotted, a
contour plot can be drawn at the base XY plane, and a curtain can be
drawn between the plotted function border and the base XY plane.

`x'  (`PLFLT *', input)
     Pointer to set of x coordinate values at which the function is
     evaluated.

`y'  (`PLFLT *', input)
     Pointer to set of y coordinate values at which the function is
     evaluated.

`z'  (`PLFLT **', input)
     Pointer to a vectored two-dimensional array with set of function
     values.

`nx'  (`PLINT', input)
     Number of ``x'' values at which function is evaluated.

`ny'  (`PLINT', input)
     Number of ``y'' values at which function is evaluated.

`opt'  (`PLINT', input)
     Determines the way in which the surface is represented. To specify
     more than one option just add the options, e.g. DRAW_LINEXY +
     MAG_COLOR

        * ``opt'=DRAW_LINEX': Lines are drawn showing ``z'' as a
          function of ``x'' for each value of ``y'[j]'.

        * ``opt'=DRAW_LINEY': Lines are drawn showing ``z'' as a
          function of ``y'' for each value of ``x'[i]'.

        * ``opt'=DRAW_LINEXY': Network of lines is drawn connecting
          points at which function is defined.

        * ``opt'=MAG_COLOR': Each line in the mesh is colored according
          to the z value being plotted. The color is used from the
          current colormap 1.

        * ``opt'=BASE_CONT': A contour plot is drawn at the base XY
          plane using parameters `nlevel' and `clevel'.

        * ``opt'=DRAW_SIDES': draws a curtain between the base XY plane
          and the borders of the plotted function.

`clevel'  (`PLFLT *', input)
     Pointer to the array that defines the contour level spacing.

`nlevel'  (`PLINT', input)
     Number of elements in the `clevel' array.


File: plplotdoc.info,  Node: plmkstrm; Creates a new stream and makes it the default,  Next: plmtex; Write text relative to viewport boundaries,  Prev: plmeshc; Magnitude colored plot surface mesh with contour_,  Up: The Common API for PLplot

16.62 plmkstrm: Creates a new stream and makes it the default
=============================================================

     plmkstrm (p_strm);

   Creates a new stream and makes it the default. Differs from using
`plsstrm' (*note plsstrm; Set current output stream::), in that a free
stream number is found, and returned.  Unfortunately, I have to start
at stream 1 and work upward, since stream 0 is preallocated. One of the
big flaws in the PLplot API is that no initial, library-opening call is
required. So stream 0 must be preallocated, and there is no simple way
of determining whether it is already in use or not.

`p_strm'  (`PLINT *', output)
     Pointer to stream number of the created stream.


File: plplotdoc.info,  Node: plmtex; Write text relative to viewport boundaries,  Next: plot3d; Plot 3-d surface plot,  Prev: plmkstrm; Creates a new stream and makes it the default,  Up: The Common API for PLplot

16.63 plmtex: Write text relative to viewport boundaries
========================================================

     plmtex (side, disp, pos, just, text);

   Writes text at a specified position relative to the viewport
boundaries. Text may be written inside or outside the viewport, but is
clipped at the subpage boundaries. The reference point of a string lies
along a line passing through the string at half the height of a capital
letter. The position of the reference point along this line is
determined by ``just'', and the position of the reference point
relative to the viewport is set by ``disp'' and ``pos''.

`side'  (`const char *', input)
     Specifies the side of the viewport along which the text is to be
     written. The string must be one of:

        * `b': Bottom of viewport, text written parallel to edge.

        * `bv': Bottom of viewport, text written at right angles to
          edge.

        * `l': Left of viewport, text written parallel to edge.

        * `lv': Left of viewport, text written at right angles to edge.

        * `r': Right of viewport, text written parallel to edge.

        * `rv': Right of viewport, text written at right angles to edge.

        * `t': Top of viewport, text written parallel to edge.

        * `tv': Top of viewport, text written at right angles to edge.

`disp'  (`PLFLT', input)
     Position of the reference point of string, measured outwards from
     the specified viewport edge in units of the current character
     height. Use negative ``disp'' to write within the viewport.

`pos'  (`PLFLT', input)
     Position of the reference point of string along the specified
     edge, expressed as a fraction of the length of the edge.

`just'  (`PLFLT', input)
     Specifies the position of the string relative to its reference
     point. If ``just'=0', the reference point is at the left and if
     ``just'=1', it is at the right of the string. Other values of
     ``just'' give intermediate justifications.

`text'  (`const char *', input)
     The string to be written out.


File: plplotdoc.info,  Node: plot3d; Plot 3-d surface plot,  Next: plot3dc; Magnitude colored plot surface with contour_,  Prev: plmtex; Write text relative to viewport boundaries,  Up: The Common API for PLplot

16.64 plot3d: Plot 3-d surface plot
===================================

     plot3d (x, y, z, nx, ny, opt, side);

   Plots a three dimensional surface plot within the environment set up
by `plw3d' (*note plw3d; Set up window for 3-d plotting::). The surface
is defined by the two-dimensional array ``z'[`nx'][`ny']', the point
``z'[i][j]' being the value of the function at `(`x'[i], `y'[j])'. Note
that the points in arrays ``x'' and ``y'' do not need to be equally
spaced, but must be stored in ascending order. The parameter ``opt''
controls the way in which the surface is displayed. For further details
see *Note Three Dimensional Surface Plots: Three Dimensional Surface
Plots..  The only difference between `plmesh' (*note plmesh; Plot
surface mesh::) and `plot3d' (*note plot3d; Plot 3-d surface plot::) is
that `plmesh' (*note plmesh; Plot surface mesh::) draws the botton side
of the surface, while `plot3d' (*note plot3d; Plot 3-d surface plot::)
only draws the surface as viewed from the top.

`x'  (`PLFLT *', input)
     Pointer to set of x coordinate values at which the function is
     evaluated.

`y'  (`PLFLT *', input)
     Pointer to set of y coordinate values at which the function is
     evaluated.

`z'  (`PLFLT **', input)
     Pointer to a vectored two-dimensional array with set of function
     values.

`nx'  (`PLINT', input)
     Number of ``x'' values at which function is evaluated.

`ny'  (`PLINT', input)
     Number of ``y'' values at which function is evaluated.

`opt'  (`PLINT', input)
     Determines the way in which the surface is represented:

        * ``opt'=DRAW_LINEX': Lines are drawn showing ``z'' as a
          function of ``x'' for each value of ``y'[j]'.

        * ``opt'=DRAW_LINEY': Lines are drawn showing ``z'' as a
          function of ``y'' for each value of ``x'[i]'.

        * ``opt'=DRAW_LINEXY': Network of lines is drawn connecting
          points at which function is defined.

`side'  (`PLINT', input)
     Flag to indicate whether or not "sides" should be draw on the
     figure. If ``side'=0' no sides are drawn, otherwise the sides are
     drawn.


File: plplotdoc.info,  Node: plot3dc; Magnitude colored plot surface with contour_,  Next: plparseopts; Parse command-line arguments,  Prev: plot3d; Plot 3-d surface plot,  Up: The Common API for PLplot

16.65 plot3dc: Magnitude colored plot surface with contour.
===========================================================

     plot3dc (x, y, z, nx, ny, opt, clevel, nlevel);

   Identical to `plot3d' but with extra functionalities: the surface
mesh can be colored accordingly to the current z value being plotted, a
contour plot can be drawn at the base XY plane, and a curtain can be
drawn between the plotted function border and the base XY plane.  The
arguments are identical to `plmeshc'. The only difference between
`plmeshc' (*note plmeshc; Magnitude colored plot surface mesh with
contour_::) and `plot3dc' (*note plot3dc; Magnitude colored plot
surface with contour_::) is that `plmeshc' (*note plmeshc; Magnitude
colored plot surface mesh with contour_::) draws the botton side of the
surface, while `plot3dc' (*note plot3dc; Magnitude colored plot surface
with contour_::) only draws the surface as viewed from the top.


File: plplotdoc.info,  Node: plparseopts; Parse command-line arguments,  Next: plpat; Set area fill pattern,  Prev: plot3dc; Magnitude colored plot surface with contour_,  Up: The Common API for PLplot

16.66 plparseopts: Parse command-line arguments
===============================================

     plparseopts (p_argc, argv, mode);

   Parse command-line arguments.

`p_argc'  (`int *', input)
     pointer to number of arguments.

`argv'  (`char **', input)
     Pointer to character array containing ``*p_argc'' command-line
     arguments.

`mode'  (`PLINT', input)
     Parsing mode with the following possibilities:

        * PL_PARSE_FULL (1) - Full parsing of command line and all
          error messages enabled, including program exit when an error
          occurs. Anything on the command line that isn't recognized as
          a valid option or option argument is flagged as an error.

        * PL_PARSE_QUIET (2) - Turns off all output except in the case
          of errors.

        * PL_PARSE_NODELETE (4) - Turns off deletion of processed
          arguments.

        * PL_PARSE_SHOWALL (8) - Show invisible options

        * PL_PARSE_NOPROGRAM (32) - Specified if argv[0] is NOT a
          pointer to the program name.

        * PL_PARSE_NODASH (64) - Set if leading dash is NOT required.

        * PL_PARSE_SKIP (128) - Set to quietly skip over any
          unrecognized args.


File: plplotdoc.info,  Node: plpat; Set area fill pattern,  Next: plpoin; Plots a character at the specified points,  Prev: plparseopts; Parse command-line arguments,  Up: The Common API for PLplot

16.67 plpat: Set area fill pattern
==================================

     plpat (nlin, inc, del);

   Sets the area fill pattern. The pattern consists of 1 or 2 sets of
parallel lines with specified inclinations and spacings. The arguments
to this routine are the number of sets to use (1 or 2) followed by two
pointers to integer arrays (of 1 or 2 elements) specifying the
inclinations in tenths of a degree and the spacing in micrometers.
(also see `plpsty' (*note plpsty; Select area fill pattern::))

`nlin'  (`PLINT', input)
     Number of sets of lines making up the pattern, either 1 or 2.

`inc'  (`PLINT *', input)
     Pointer to array with ``nlin'' elements.  Specifies the line
     inclination in tenths of a degree. (Should be between -900 and
     900).

`del'  (`PLINT *', input)
     Pointer to array with ``nlin'' elements.  Specifies the spacing in
     micrometers between the lines making up the pattern.


File: plplotdoc.info,  Node: plpoin; Plots a character at the specified points,  Next: plpoin3; Plots a character at the specified points in 3 space,  Prev: plpat; Set area fill pattern,  Up: The Common API for PLplot

16.68 plpoin: Plots a character at the specified points
=======================================================

     plpoin (n, x, y, code);

   Marks a set of ``n'' points in ``x'' and ``y'' using the symbol
defined by ``code''.  If ``code'' is between 32 and 127, the symbol is
simply the corresponding printable ASCII character in the default font.

`n'  (`PLINT', input)
     Number of points to be marked.

`x'  (`PLFLT *', input)
     Pointer to array with x coordinates of the points.

`y'  (`PLFLT *', input)
     Pointer to array with y coordinates of the points.

`code'  (`PLINT', input)
     Code number for the symbol to be plotted.


File: plplotdoc.info,  Node: plpoin3; Plots a character at the specified points in 3 space,  Next: plpoly3; Draw a polygon in 3 space,  Prev: plpoin; Plots a character at the specified points,  Up: The Common API for PLplot

16.69 plpoin3: Plots a character at the specified  points in 3 space
====================================================================

     plpoin3 (n, x, y, z, code);

   Marks a set of ``n'' points in ``x'', ``y'', and ``z'' using the
symbol defined by ``code''.  If ``code'' is between 32 and 127, the
symbol is simply the corresponding printable ASCII character in the
default font.  Setup similar to `plline3' (*note plline3; Draw a line
in 3 space::).

`n'  (`PLINT', input)
     Number of points to be marked.

`x'  (`PLFLT *', input)
     Pointer to array with x coordinates of the points.

`y'  (`PLFLT *', input)
     Pointer to array with y coordinates of the points.

`z'  (`PLFLT *', input)
     Pointer to array with z coordinates of the points.

`code'  (`PLINT', input)
     Code number for the symbol to be plotted.


File: plplotdoc.info,  Node: plpoly3; Draw a polygon in 3 space,  Next: plprec; Set precision in numeric labels,  Prev: plpoin3; Plots a character at the specified points in 3 space,  Up: The Common API for PLplot

16.70 plpoly3: Draw a polygon in 3 space
========================================

     plpoly3 (n, x, y, z, draw, ifcc);

   Draws a polygon in 3 space defined by ``n'' points in ``x'', ``y'',
and ``z''.  Setup like `plline3' (*note plline3; Draw a line in 3
space::), but differs from that function in that `plpoly3' (*note
plpoly3; Draw a polygon in 3 space::) attempts to determine if the
polygon is viewable depending on the order of the points within the
arrays and the value of ``ifcc''. If the back of polygon is facing the
viewer, then it isn't drawn. If this isn't what you want, then use
`plline3' (*note plline3; Draw a line in 3 space::) instead.

   The points are assumed to be in a plane, and the directionality of
the plane is determined from the first three points. Additional points
do not have to lie on the plane defined by the first three, but if they
do not, then the determination of visibility obviously can't be 100%
accurate... So if you're 3 space polygons are too far from planar,
consider breaking them into smaller polygons. 3 points define a plane
:-).

   Bugs: If one of the first two segments is of zero length, or if they
are colinear, the calculation of visibility has a 50/50 chance of being
correct. Avoid such situations :-). See `x18c.c' for an example of this
problem.  (Search for 20.1).

`n'  (`PLINT', input)
     Number of points defining line.

`x'  (`PLFLT *', input)
     Pointer to array with x coordinates of points.

`y'  (`PLFLT *', input)
     Pointer to array with y coordinates of points.

`z'  (`PLFLT *', input)
     Pointer to array with z coordinates of points.

`draw'  (`PLINT *', input)
     Pointer to array which controls drawing the segments of the
     polygon. If ``draw[i]'' is true, then the polygon segment from
     index ``[i]'' to ``[i+1]'' is drawn, otherwise, not.

`ifcc'  (`PLINT', input)
     If ``ifcc'=1' the directionality of the polygon is determined by
     assuming the points are laid out in a counter-clockwise order.  If
     ``ifcc'=0' the directionality of the polygon is determined by
     assuming the points are laid out in a clockwise order.


File: plplotdoc.info,  Node: plprec; Set precision in numeric labels,  Next: plpsty; Select area fill pattern,  Prev: plpoly3; Draw a polygon in 3 space,  Up: The Common API for PLplot

16.71 plprec: Set precision in numeric labels
=============================================

     plprec (set, prec);

   Sets the number of places after the decimal point in numeric labels.

`set'  (`PLINT', input)
     If ``set'' is equal to 0 then PLplot automatically determines the
     number of places to use after the decimal point in numeric labels
     (like those used to label axes). If ``set'' is 1 then ``prec''
     sets the number of places.

`prec'  (`PLINT', input)
     The number of characters to draw after the decimal point in
     numeric labels.


File: plplotdoc.info,  Node: plpsty; Select area fill pattern,  Next: plptex; Write text inside the viewport,  Prev: plprec; Set precision in numeric labels,  Up: The Common API for PLplot

16.72 plpsty: Select area fill pattern
======================================

     plpsty (n);

   Select one of eight predefined area fill patterns to use (also see
`plpat' (*note plpat; Set area fill pattern::)).

`n'  (`PLINT', input)
     The desired pattern. Pattern 1 consists of horizontal lines,
     pattern 2 consists of vertical lines, pattern 3 consists of lines
     at 45 degrees angle (upward), and so on.


File: plplotdoc.info,  Node: plptex; Write text inside the viewport,  Next: plreplot; Replays contents of plot buffer to current device/file,  Prev: plpsty; Select area fill pattern,  Up: The Common API for PLplot

16.73 plptex: Write text inside the viewport
============================================

     plptex (x, y, dx, dy, just, text);

   Writes text at a specified position and inclination within the
viewport. Text is clipped at the viewport boundaries. The reference
point of a string lies along a line passing through the string at half
the height of a capital letter. The position of the reference point
along this line is determined by ``just'', the reference point is
placed at world coordinates `(`x', `y')' within the viewport. The
inclination of the string is specified in terms of differences of world
coordinates making it easy to write text parallel to a line in a graph.

`x'  (`PLFLT', input)
     x coordinate of reference point of string.

`y'  (`PLFLT', input)
     y coordinate of reference point of string.

`dx'  (`PLFLT', input)
     Together with ``dy'', this specifies the inclination of the
     string. The baseline of the string is parallel to a line joining
     `(`x', `y')' to `(`x'+`dx', `y'+`dy')'.

`dy'  (`PLFLT', input)
     Together with ``dx'', this specifies the inclination of the string.

`just'  (`PLFLT', input)
     Specifies the position of the string relative to its reference
     point. If ``just'=0', the reference point is at the left and if
     ``just'=1', it is at the right of the string. Other values of
     ``just'' give intermediate justifications.

`text'  (`const char *', input)
     The string to be written out.


File: plplotdoc.info,  Node: plreplot; Replays contents of plot buffer to current device/file,  Next: plrgbhls; Convert RGB color to HLS,  Prev: plptex; Write text inside the viewport,  Up: The Common API for PLplot

16.74 plreplot: Replays contents of plot buffer to current device/file
======================================================================

     plreplot ();

   Replays contents of plot buffer to current device/file.


File: plplotdoc.info,  Node: plrgbhls; Convert RGB color to HLS,  Next: plschr; Set character size,  Prev: plreplot; Replays contents of plot buffer to current device/file,  Up: The Common API for PLplot

16.75 plrgbhls: Convert RGB color to HLS
========================================

     plrgbhls (r, g, b, p_h, p_l, p_s);

   Convert RGB color coordinates to HLS

`r'  (`PLFLT', output)
     Red intensity (0.0-1.0) of the colour

`g'  (`PLFLT', output)
     Green intensity (0.0-1.0) of the colour

`b'  (`PLFLT', output)
     Blue intensity (0.0-1.0) of the colour

`p_h'  (`PLFLT *', input)
     Pointer to hue, in degrees on the colour cone (0.0-360.0)

`p_l'  (`PLFLT *', input)
     Pointer to lightness, expressed as a fraction of the axis of the
     colour cone (0.0-1.0)

`p_s'  (`PLFLT *', input)
     Pointer to saturation, expressed as a fraction of the radius of the
     colour cone (0.0-1.0)


File: plplotdoc.info,  Node: plschr; Set character size,  Next: plscmap0; Set color map0 colors by 8-bit RGB values,  Prev: plrgbhls; Convert RGB color to HLS,  Up: The Common API for PLplot

16.76 plschr: Set character size
================================

     plschr (def, scale);

   This sets up the size of all subsequent characters drawn. The actual
height of a character is the product of the default character size and
a scaling factor.

`def'  (`PLFLT', input)
     The default height of a character in millimeters, should be set to
     zero if the default height is to remain unchanged.

`scale'  (`PLFLT', input)
     Scale factor to be applied to default to get actual character
     height.


File: plplotdoc.info,  Node: plscmap0; Set color map0 colors by 8-bit RGB values,  Next: plscmap0n; Set number of colors in color map0,  Prev: plschr; Set character size,  Up: The Common API for PLplot

16.77 plscmap0: Set color map0 colors by 8-bit RGB values
=========================================================

     plscmap0 (r, g, b, ncol0);

   Set color map0 colors using 8-bit RGB values (see *Note Color Map0:
Color Map0.). This sets the entire color map - only as many colors as
specified will be allocated.

`r'  (`PLINT *', input)
     Pointer to array with set of unsigned 8-bit integers (0-255)
     representing the degree of red in the color.

`g'  (`PLINT *', input)
     Pointer to array with set of unsigned 8-bit integers (0-255)
     representing the degree of green in the color.

`b'  (`PLINT *', input)
     Pointer to array with set of unsigned 8-bit integers (0-255)
     representing the degree of blue in the color.

`ncol0'  (`PLINT', input)
     Number of items in the ``r'', ``g'', and ``b'' arrays.


File: plplotdoc.info,  Node: plscmap0n; Set number of colors in color map0,  Next: plscmap1; Set color map1 colors using 8-bit RGB values,  Prev: plscmap0; Set color map0 colors by 8-bit RGB values,  Up: The Common API for PLplot

16.78 plscmap0n: Set number of colors in color map0
===================================================

     plscmap0n (ncol0);

   Set number of colors in color map0 (see *Note Color Map0: Color
Map0.). Allocate (or reallocate) color map0, and fill with default
values for those colors not previously allocated.  The first 16 default
colors are given in the `plcol0' (*note plcol0; Set color; map0::)
documentation.  For larger indices the default color is red.

   The drivers are not guaranteed to support more than 16 colors.

`ncol0'  (`PLINT', input)
     Number of colors that will be allocated in the map0 palette.  If
     this number is zero or less, then the value from the previous call
     to `plscmap0n' (*note plscmap0n; Set number of colors in color
     map0::) is used and if there is no previous call, then a default
     value is used.


File: plplotdoc.info,  Node: plscmap1; Set color map1 colors using 8-bit RGB values,  Next: plscmap1l; Set color map1 colors using a piece-wise linear relationship,  Prev: plscmap0n; Set number of colors in color map0,  Up: The Common API for PLplot

16.79 plscmap1: Set color map1 colors using 8-bit RGB values
============================================================

     plscmap1 (r, g, b, ncol1);

   Set color map1 colors using 8-bit RGB values (see *Note Color Map1:
Color Map1.). This also sets the number of colors.

`r'  (`PLINT *', input)
     Pointer to array with set of unsigned 8-bit integers (0-255)
     representing the degree of red in the color.

`g'  (`PLINT *', input)
     Pointer to array with set of unsigned 8-bit integers (0-255)
     representing the degree of green in the color.

`b'  (`PLINT *', input)
     Pointer to array with set of unsigned 8-bit integers (0-255)
     representing the degree of blue in the color.

`ncol1'  (`PLINT', input)
     Number of items in the ``r'', ``g'', and ``b'' arrays.


File: plplotdoc.info,  Node: plscmap1l; Set color map1 colors using a piece-wise linear relationship,  Next: plscmap1n; Set number of colors in color map1,  Prev: plscmap1; Set color map1 colors using 8-bit RGB values,  Up: The Common API for PLplot

16.80 plscmap1l: Set color map1 colors using a piece-wise linear relationship
=============================================================================

     plscmap1l (itype, npts, pos, coord1, coord2, coord3, rev);

   Set color map1 colors using a piece-wise linear relationship between
position in the color map (from 0 to 1) and position in HLS or RGB
color space (see *Note Color Map1: Color Map1.). May be called at any
time.

   The idea here is to specify a number of control points that define
the mapping between palette 1 input positions (intensities) and HLS (or
RGB). Between these points, linear interpolation is used which gives a
smooth variation of color with input position. Any number of control
points may be specified, located at arbitrary positions, although
typically 2 - 4 are enough. Another way of stating this is that we are
traversing a given number of lines through HLS (or RGB) space as we
move through color map1 entries. The control points at the minimum and
maximum position (0 and 1) must always be specified. By adding more
control points you can get more variation. One good technique for
plotting functions that vary about some expected average is to use an
additional 2 control points in the center (position ~= 0.5) that are
the same lightness as the background (typically white for paper output,
black for crt), and same hue as the boundary control points. This
allows the highs and lows to be very easily distinguished.

   Each control point must specify the position in color map1 as well as
three coordinates in HLS or RGB space. The first point must correspond
to position = 0, and the last to position = 1.

   The hue is interpolated around the "front" of the color wheel
(red<->green<->blue<->red) unless the "rev" flag is set, in which case
interpolation (between the `i' and `i + 1' control point for `rev[i]')
proceeds around the back (reverse) side. Specifying rev=NULL is
equivalent to setting rev[]=0 for every control point.

   * Bounds on coordinates*

RGB                R                  [0, 1]             magnitude
RGB                G                  [0, 1]             magnitude
RGB                B                  [0, 1]             magnitude
HLS                hue                [0, 360]           degrees
HLS                lightness          [0, 1]             magnitude
HLS                saturation         [0, 1]             magnitude

`itype'  (`PLINT', input)
     0: HLS, 1: RGB

`npts'  (`PLINT', input)
     number of control points

`pos'  (`PLFLT *', input)
     position for each control point (between 0.0 and 1.0, in ascending
     order)

`coord1'  (`PLFLT *', input)
     first coordinate (H or R) for each control point

`coord2'  (`PLFLT *', input)
     second coordinate (L or G) for each control point

`coord3'  (`PLFLT *', input)
     third coordinate (S or B) for each control point

`rev'  (`PLINT *', input)
     reverse flag for each control point (`rev[i]' refers to the
     interpolation interval between the `i' and `i + 1' control points).


File: plplotdoc.info,  Node: plscmap1n; Set number of colors in color map1,  Next: plscol0; Set a given color from color map0 by 8 bit RGB value,  Prev: plscmap1l; Set color map1 colors using a piece-wise linear relationship,  Up: The Common API for PLplot

16.81 plscmap1n: Set number of colors in color map1
===================================================

     plscmap1n (ncol1);

   Set number of colors in color map1, (re-)allocate color map1, and
set default values if this is the first allocation (see *Note Color
Map1: Color Map1.).

`ncol1'  (`PLINT', input)
     Number of colors that will be allocated in the map1 palette.  If
     this number is zero or less, then the value from the previous call
     to `plscmap1n' (*note plscmap1n; Set number of colors in color
     map1::) is used and if there is no previous call, then a default
     value is used.


File: plplotdoc.info,  Node: plscol0; Set a given color from color map0 by 8 bit RGB value,  Next: plscolbg; Set the background color by 8-bit RGB value,  Prev: plscmap1n; Set number of colors in color map1,  Up: The Common API for PLplot

16.82 plscol0: Set a given color from color map0 by 8 bit RGB value
===================================================================

     plscol0 (icol0, r, g, b);

   Set a given color by 8-bit RGB value for color map0 (see *Note Color
Map0: Color Map0.). Overwrites the previous color value for the given
index and, thus, does not result in any additional allocation of space
for colors.

`icol0'  (`PLINT', input)
     Color index. Must be less than the maximum number of colors (which
     is set by default, by `plscmap0n' (*note plscmap0n; Set number of
     colors in color map0::), or even by `plscmap0' (*note plscmap0;
     Set color map0 colors by 8-bit RGB values::)).

`r'  (`PLINT', input)
     Unsigned 8-bit integer (0-255) representing the degree of red in
     the color.

`g'  (`PLINT', input)
     Unsigned 8-bit integer (0-255) representing the degree of green in
     the color.

`b'  (`PLINT', input)
     Unsigned 8-bit integer (0-255) representing the degree of blue in
     the color.


File: plplotdoc.info,  Node: plscolbg; Set the background color by 8-bit RGB value,  Next: plscolor; Used to globally turn color output on/off,  Prev: plscol0; Set a given color from color map0 by 8 bit RGB value,  Up: The Common API for PLplot

16.83 plscolbg: Set the background color by 8-bit RGB value
===========================================================

     plscolbg (r, g, b);

   Set the background color (color 0 in color map 0) by 8-bit RGB value
(see *Note Color Map0: Color Map0.).

`r'  (`PLINT', input)
     Unsigned 8-bit integer (0-255) representing the degree of red in
     the color.

`g'  (`PLINT', input)
     Unsigned 8-bit integer (0-255) representing the degree of green in
     the color.

`b'  (`PLINT', input)
     Unsigned 8-bit integer (0-255) representing the degree of blue in
     the color.


File: plplotdoc.info,  Node: plscolor; Used to globally turn color output on/off,  Next: plscompression; Set device-compression level,  Prev: plscolbg; Set the background color by 8-bit RGB value,  Up: The Common API for PLplot

16.84 plscolor: Used to globally turn color output on/off
=========================================================

     plscolor (color);

   Used to globally turn color output on/off for those drivers/devices
that support it.

`color'  (`PLINT', input)
     Color flag (Boolean). If zero, color is turned off. If non-zero,
     color is turned on.


File: plplotdoc.info,  Node: plscompression; Set device-compression level,  Next: plsdev; Set the device [keyword] name,  Prev: plscolor; Used to globally turn color output on/off,  Up: The Common API for PLplot

16.85 plscompression: Set device-compression level
==================================================

     plscompression (compression);

   Set device-compression level. Only used for drivers that provide
compression. This function, if used, should be invoked before a call to
`plinit' (*note plinit; Initialize PLplot::).

`compression'  (`PLINT', input)
     The desired compression level. This is a device-dependent value.


File: plplotdoc.info,  Node: plsdev; Set the device [keyword] name,  Next: plsdidev; Set parameters that define current device-space window,  Prev: plscompression; Set device-compression level,  Up: The Common API for PLplot

16.86 plsdev: Set the device (keyword) name
===========================================

     plsdev (devname);

   Set the device (keyword) name.

`devname'  (`const char *', output)
     Pointer to device (keyword) name string.


File: plplotdoc.info,  Node: plsdidev; Set parameters that define current device-space window,  Next: plsdimap; Set up transformation from metafile coordinates,  Prev: plsdev; Set the device [keyword] name,  Up: The Common API for PLplot

16.87 plsdidev: Set parameters that define current  device-space window
=======================================================================

     plsdidev (mar, aspect, jx, jy);

   Set relative margin width, aspect ratio, and relative justification
that define current device-space window. If you want to just use the
previous value for any of these, just pass in the magic value
PL_NOTSET. It is unlikely that one should ever need to change the
aspect ratio but it's in there for completeness.  If `plsdidev' (*note
plsdidev; Set parameters that define current device-space window::) is
not called the default values of ``mar'', ``jx'', and ``jy'' are all 0.
``aspect'' is set to a device-specific value.

`mar'  (`PLFLT', input)
     Relative margin width.

`aspect'  (`PLFLT', input)
     Aspect ratio.

`jx'  (`PLFLT', input)
     Relative justification in x.

`jy'  (`PLFLT', input)
     Relative justification in y.


File: plplotdoc.info,  Node: plsdimap; Set up transformation from metafile coordinates,  Next: plsdiori; Set plot orientation,  Prev: plsdidev; Set parameters that define current device-space window,  Up: The Common API for PLplot

16.88 plsdimap: Set up transformation from metafile coordinates
===============================================================

     plsdimap (dimxmin, dimxmax, dimymin, dimymax, dimxpmm, dimypmm);

   Set up transformation from metafile coordinates. The size of the plot
is scaled so as to preserve aspect ratio. This isn't intended to be a
general-purpose facility just yet (not sure why the user would need it,
for one).

`dimxmin'  (`PLINT', input)
     NEEDS DOCUMENTATION

`dimxmax'  (`PLINT', input)
     NEEDS DOCUMENTATION

`dimymin'  (`PLINT', input)
     NEEDS DOCUMENTATION

`dimymax'  (`PLINT', input)
     NEEDS DOCUMENTATION

`dimxpmm'  (`PLFLT', input)
     NEEDS DOCUMENTATION

`dimypmm'  (`PLFLT', input)
     NEEDS DOCUMENTATION


File: plplotdoc.info,  Node: plsdiori; Set plot orientation,  Next: plsdiplt; Set parameters that define current plot-space window,  Prev: plsdimap; Set up transformation from metafile coordinates,  Up: The Common API for PLplot

16.89 plsdiori: Set plot orientation
====================================

     plsdiori (rot);

   Set plot orientation parameter which is multiplied by 90 degrees to
obtain the angle of rotation. Note, arbitrary rotation parameters such
as 0.2 (corresponding to 18 degrees) are possible, but the usual values
for the rotation parameter are 0., 1., 2., and 3. corresponding to 0
degrees (landscape mode), 90 degrees (portrait mode), 180 degrees
(seascape mode), and 270 degrees (upside-down mode).  If `plsdiori'
(*note plsdiori; Set plot orientation::) is not called the default value
of ``rot'' is 0.

`rot'  (`PLFLT', input)
     Plot orientation parameter.


File: plplotdoc.info,  Node: plsdiplt; Set parameters that define current plot-space window,  Next: plsdiplz; Set parameters incrementally [zoom mode] that define current plot-space window,  Prev: plsdiori; Set plot orientation,  Up: The Common API for PLplot

16.90 plsdiplt: Set parameters that define current  plot-space window
=====================================================================

     plsdiplt (xmin, ymin, xmax, ymax);

   Set relative minima and maxima that define the current plot-space
window. If `plsdiplt' (*note plsdiplt; Set parameters that define
current plot-space window::) is not called the default values of
``xmin'', ``ymin'', ``xmax'', and ``ymax'' are 0., 0., 1., and 1.

`xmin'  (`PLFLT', input)
     Relative minimum in x.

`ymin'  (`PLFLT', input)
     Relative minimum in y.

`xmax'  (`PLFLT', input)
     Relative maximum in x.

`ymax'  (`PLFLT', input)
     Relative maximum in y.


File: plplotdoc.info,  Node: plsdiplz; Set parameters incrementally [zoom mode] that define current plot-space window,  Next: plsesc; Set the escape character for text strings,  Prev: plsdiplt; Set parameters that define current plot-space window,  Up: The Common API for PLplot

16.91 plsdiplz: Set parameters incrementally (zoom mode)  that define current plot-space window
===============================================================================================

     plsdiplz (xmin, ymin, xmax, ymax);

   Set relative minima and maxima incrementally (zoom mode) that define
the current plot-space window. This function has the same effect as
`plsdiplt' (*note plsdiplt; Set parameters that define current
plot-space window::) if that function has not been previously called.
Otherwise, this function implements zoom mode using the transformation
`min_used = old_min + old_length*min ' and `max_used = old_min +
old_length*max ' for each axis. For example, if `min = 0.05' and `max =
0.95' for each axis, repeated calls to `plsdiplz' (*note plsdiplz; Set
parameters incrementally [zoom mode] that define current plot-space
window::) will zoom in by 10 per cent for each call.

`xmin'  (`PLFLT', input)
     Relative (incremental) minimum in x.

`ymin'  (`PLFLT', input)
     Relative (incremental) minimum in y.

`xmax'  (`PLFLT', input)
     Relative (incremental) maximum in x.

`ymax'  (`PLFLT', input)
     Relative (incremental) maximum in y.


File: plplotdoc.info,  Node: plsesc; Set the escape character for text strings,  Next: plsetopt; Set any command-line option,  Prev: plsdiplz; Set parameters incrementally [zoom mode] that define current plot-space window,  Up: The Common API for PLplot

16.92 plsesc: Set the escape character for text strings
=======================================================

     plsesc (esc);

   Set the escape character for text strings. From C (in contrast to
fortran, see `plsescfortran' (*note plsesc; Set the escape character
for text strings for fortran::)) you pass ``esc'' as a character.  Only
selected characters are allowed to prevent the user from shooting
himself in the foot (For example, a \ isn't allowed since it conflicts
with C's use of backslash as a character escape). Here are the allowed
escape characters and their corresponding decimal ASCII values:

   * !, ASCII 33

   * #, ASCII 35

   * $, ASCII 36

   * %, ASCII 37

   * &, ASCII 38

   * *, ASCII 42

   * @, ASCII 64

   * ^, ASCII 94

   * ~, ASCII 126

`esc'  (`char', input)
     Escape character.


File: plplotdoc.info,  Node: plsetopt; Set any command-line option,  Next: plsfam; Set family file parameters,  Prev: plsesc; Set the escape character for text strings,  Up: The Common API for PLplot

16.93 plsetopt: Set any command-line option
===========================================

     plsetopt (opt, optarg);

   Set any command-line option internally from a program before it
invokes `plinit' (*note plinit; Initialize PLplot::). `opt' is the name
of the command-line option and `optarg' is the corresponding
command-line option argument.

`opt'  (`const char *', output)
     Pointer to string containing the command-line option.

`optarg'  (`const char *', output)
     Pointer to string containing the argument of the command-line
     option.


File: plplotdoc.info,  Node: plsfam; Set family file parameters,  Next: plsfci; Set FCI [font characterization integer],  Prev: plsetopt; Set any command-line option,  Up: The Common API for PLplot

16.94 plsfam: Set family file parameters
========================================

     plsfam (fam, num, bmax);

   Sets variables dealing with output file familying. Does nothing if
familying not supported by the driver. This routine, if used, must be
called before initializing PLplot. See *Note Family File Output: Family
File Output.  for more information.

`fam'  (`PLINT', input)
     Family flag (Boolean). If nonzero, familying is enabled.

`num'  (`PLINT', input)
     Current family file number.

`bmax'  (`PLINT', input)
     Maximum file size (in bytes) for a family file.


File: plplotdoc.info,  Node: plsfci; Set FCI [font characterization integer],  Next: plsfnam; Set output file name,  Prev: plsfam; Set family file parameters,  Up: The Common API for PLplot

16.95 plsfci: Set FCI (font characterization integer)
=====================================================

     plsfci (fci);

   Sets font characteristics to be used at the start of the next string
using the FCI approach.  See *Note FCI: FCI. for more information.

`fci'  (`PLUNICODE', input)
     PLUNICODE (unsigned 32-bit integer) value of FCI.


File: plplotdoc.info,  Node: plsfnam; Set output file name,  Next: plshades; Shade regions on the basis of value,  Prev: plsfci; Set FCI [font characterization integer],  Up: The Common API for PLplot

16.96 plsfnam: Set output file name
===================================

     plsfnam (fnam);

   Sets the current output file name, if applicable. If the file name
has not been specified and is required by the driver, the user will be
prompted for it. If using the X-windows output driver, this sets the
display name. This routine, if used, must be called before initializing
PLplot.

`fnam'  (`const char *', input)
     Pointer to file name string.


File: plplotdoc.info,  Node: plshades; Shade regions on the basis of value,  Next: plshade; Shade individual region on the basis of value,  Prev: plsfnam; Set output file name,  Up: The Common API for PLplot

16.97 plshades: Shade regions on the basis of value
===================================================

     plshades (a, nx, ny, defined, xmin, xmax, ymin, ymax, clevel,
     nlevel, fill_width, cont_color, cont_width, fill, rectangular,
     pltr, pltr_data);

   Shade regions on the basis of value. This is the high-level routine
for making continuous color shaded plots with cmap1 while `plshade'
(*note plshade; Shade individual region on the basis of value::) (or
`plshade1' (*note plshade1; Shade individual region on the basis of
value::)) are used for individual shaded regions using either cmap0 or
cmap1.  `examples/c/x16c.c' shows a number of examples for using this
function.  See the following discussion of the arguments and *Note
Contour and Shade Plots: Contour and Shade Plots. for more information.

`a'  (`PLFLT **', input)
     Contains ** pointer to array to be plotted. The array must have
     been declared as PLFLT a[nx][ny].

`nx'  (`PLINT', input)
     First dimension of array "a".

`ny'  (`PLINT', input)
     Second dimension of array "a".

`defined'  (`PLINT (*) (PLFLT, PLFLT)', input)
     User function specifying regions excluded from the shading plot.
     This function accepts x and y coordinates as input arguments and
     must return 0 if the point is in the excluded region or 1
     otherwise. This argument can be NULL if all the values are valid.

`xmin'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.
     (xmax,ymin)

`xmax'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.

`ymin'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.

`ymax'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.

`clevel'  (`PLFLT *', input)
     Pointer to array containing the data levels corresponding to the
     edges of each shaded region that will be plotted by this function.
     To work properly the levels should be monotonic.

`nlevel'  (`PLINT', input)
     Number of shades plus 1 (i.e., the number of shade edge values in
     ``clevel'').

`fill_width'  (`PLINT', input)
     Defines width used by the fill pattern.

`cont_color'  (`PLINT', input)
     Defines pen color used for contours defining edges of shaded
     regions. The pen color is only temporary set for the contour
     drawing. Set this value to zero or less if no shade edge contours
     are wanted.

`cont_width'  (`PLINT', input)
     Defines pen width used for contours defining edges of shaded
     regions. This value may not be honored by all drivers.  The pen
     width is only temporary set for the contour drawing. Set this
     value to zero or less if no shade edge contours are wanted.

`fill'  (`void (*) (PLINT, PLFLT *, PLFLT *)', input)
     Routine used to fill the region. Use `plfill' (*note plfill; Draw
     filled polygon::). Future version of PLplot may have other fill
     routines.

`rectangular'  (`PLINT', input)
     Set ``rectangular'' to 1 if rectangles map to rectangles after
     coordinate transformation with ``pltrl''. Otherwise, set
     ``rectangular'' to 0.  If ``rectangular'' is set to 1, plshade
     tries to save time by filling large rectangles. This optimization
     fails if the coordinate transformation distorts the shape of
     rectangles.  For example a plot in polor coordinates has to have
     rectangular set to 0.

`pltr'  (`void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)  ', input)
     Pointer to function that defines transformation between indices in
     array ``z'' and the world coordinates (C only). Transformation
     functions are provided in the PLplot library: `pltr0' (*note
     pltr0; Identity transformation for grid to world mapping::) for
     identity mapping, and `pltr1' (*note pltr1; Linear interpolation
     for grid to world mapping using singly dimensioned coord arrays::)
     and `pltr2' (*note pltr2; Linear interpolation for grid to world
     mapping using doubly dimensioned coord arrays [column dominant; as
     per normal C 2d arrays]::) for arbitrary mappings respectively
     defined by one- and two-dimensional arrays. In addition,
     user-supplied routines for the transformation can be used as well.
     Examples of all of these approaches are given in *Note Contour
     Plots from C: Contour Plots from C..  The transformation function
     should have the form given by any of `pltr0' (*note pltr0;
     Identity transformation for grid to world mapping::), `pltr1'
     (*note pltr1; Linear interpolation for grid to world mapping using
     singly dimensioned coord arrays::), or `pltr2' (*note pltr2;
     Linear interpolation for grid to world mapping using doubly
     dimensioned coord arrays [column dominant; as per normal C 2d
     arrays]::).

`pltr_data'  (`PLPointer', input)
     Extra parameter to help pass information to `pltr0' (*note pltr0;
     Identity transformation for grid to world mapping::), `pltr1'
     (*note pltr1; Linear interpolation for grid to world mapping using
     singly dimensioned coord arrays::), `pltr2' (*note pltr2; Linear
     interpolation for grid to world mapping using doubly dimensioned
     coord arrays [column dominant; as per normal C 2d arrays]::), or
     whatever routine that is externally supplied.


File: plplotdoc.info,  Node: plshade; Shade individual region on the basis of value,  Next: plshade1; Shade individual region on the basis of value,  Prev: plshades; Shade regions on the basis of value,  Up: The Common API for PLplot

16.98 plshade: Shade individual region on the basis of value
============================================================

     plshade (a, nx, ny, defined, xmin, xmax, ymin, ymax, shade_min,
     shade_max, sh_cmap, sh_color, sh_width, min_color, min_width,
     max_color, max_width, fill, rectangular, pltr, pltr_data);

   Shade individual region on the basis of value. Use `plshades' (*note
plshades; Shade regions on the basis of value::) if you want to shade a
number of regions using continuous colors.  `plshade' (*note plshade;
Shade individual region on the basis of value::) is identical to
`plshade1' (*note plshade1; Shade individual region on the basis of
value::) except for the type of the first parameter.  See `plshade1'
(*note plshade1; Shade individual region on the basis of value::) for
further discussion.

`a'  (`PLFLT **', input)

`nx'  (`PLINT', input)

`ny'  (`PLINT', input)

`defined'  (`PLINT (*) (PLFLT, PLFLT)', input)

`xmin'  (`PLFLT', input)

`xmax'  (`PLFLT', input)

`ymin'  (`PLFLT', input)

`ymax'  (`PLFLT', input)

`shade_min'  (`PLFLT', input)

`shade_max'  (`PLFLT', input)

`sh_cmap'  (`PLINT', input)

`sh_color'  (`PLFLT', input)

`sh_width'  (`PLINT', input)

`min_color'  (`PLINT', input)

`min_width'  (`PLINT', input)

`max_color'  (`PLINT', input)

`max_width'  (`PLINT', input)

`fill'  (`void (*) (PLINT, PLFLT *, PLFLT *)', input)

`rectangular'  (`PLINT', input)

`pltr'  (`void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)  ', input)

`pltr_data'  (`PLPointer', input)


File: plplotdoc.info,  Node: plshade1; Shade individual region on the basis of value,  Next: plsmaj; Set length of major ticks,  Prev: plshade; Shade individual region on the basis of value,  Up: The Common API for PLplot

16.99 plshade1: Shade individual region on the basis of value
=============================================================

     plshade1 (a, nx, ny, defined, xmin, xmax, ymin, ymax, shade_min,
     shade_max, sh_cmap, sh_color, sh_width, min_color, min_width,
     max_color, max_width, fill, rectangular, pltr, pltr_data);

   Shade individual region on the basis of value. Use `plshades' (*note
plshades; Shade regions on the basis of value::) if you want to shade a
number of contiguous regions using continuous colors. In particular the
edge contours are treated properly in `plshades' (*note plshades; Shade
regions on the basis of value::).  If you attempt to do contiguous
regions with `plshade1' (*note plshade1; Shade individual region on the
basis of value::) (or `plshade' (*note plshade; Shade individual region
on the basis of value::)) the contours at the edge of the shade are
partially obliterated by subsequent plots of contiguous shaded regions.
`plshade1' (*note plshade1; Shade individual region on the basis of
value::) differs from `plshade' (*note plshade; Shade individual region
on the basis of value::) by the type of the first argument. Look at the
argument list below, `plcont' (*note plcont; Contour plot::) and *Note
Contour and Shade Plots: Contour and Shade Plots. for more information
about the transformation from grid to world coordinates. Shading NEEDS
DOCUMENTATION, but as a stopgap look at how `plshade' (*note plshade;
Shade individual region on the basis of value::) is used in
`examples/c/x15c.c'

`a'  (`PLFLT *', input)
     Contains array to be plotted. The array must have been declared as
     PLFLT a[nx][ny].

`nx'  (`PLINT', input)
     First dimension of array "a".

`ny'  (`PLINT', input)
     Second dimension of array "a".

`defined'  (`PLINT (*) (PLFLT, PLFLT)', input)
     User function specifying regions excluded from the shading plot.
     This function accepts x and y coordinates as input arguments and
     must return 0 if the point is in the excluded region or 1
     otherwise. This argument can be NULL if all the values are valid.

`xmin'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.

`xmax'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.

`ymin'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.

`ymax'  (`PLFLT', input)
     Defines the "grid" coordinates. The data a[0][0] has a position of
     (xmin,ymin), a[nx-1][0] has a position at (xmax,ymin) and so on.

`shade_min'  (`PLFLT', input)
     Defines the lower end of the interval to be shaded. If shade_max
     <= shade_min, `plshade1' (*note plshade1; Shade individual region
     on the basis of value::) does nothing.

`shade_max'  (`PLFLT', input)
     Defines the upper end of the interval to be shaded. If shade_max
     <= shade_min, `plshade1' (*note plshade1; Shade individual region
     on the basis of value::) does nothing.

`sh_cmap'  (`PLINT', input)
     Defines color map.

`sh_color'  (`PLFLT', input)
     Defines color map index if cmap0 or color map input value (ranging
     from 0. to 1.) if cmap1.

`sh_width'  (`PLINT', input)
     Defines width used by the fill pattern.

`min_color'  (`PLINT', input)
     Defines pen color, width used by the boundary of shaded region.
     The min values are used for the shade_min boundary, and the max
     values are used on the shade_max boundary. Set color and width to
     zero for no plotted boundaries.

`min_width'  (`PLINT', input)
     Defines pen color, width used by the boundary of shaded region.
     The min values are used for the shade_min boundary, and the max
     values are used on the shade_max boundary. Set color and width to
     zero for no plotted boundaries.

`max_color'  (`PLINT', input)
     Defines pen color, width used by the boundary of shaded region.
     The min values are used for the shade_min boundary, and the max
     values are used on the shade_max boundary. Set color and width to
     zero for no plotted boundaries.

`max_width'  (`PLINT', input)
     Defines pen color, width used by the boundary of shaded region.
     The min values are used for the shade_min boundary, and the max
     values are used on the shade_max boundary. Set color and width to
     zero for no plotted boundaries.

`fill'  (`void (*) (PLINT, PLFLT *, PLFLT *)', input)
     Routine used to fill the region. Use `plfill' (*note plfill; Draw
     filled polygon::). Future version of plplot may have other fill
     routines.

`rectangular'  (`PLINT', input)
     Set ``rectangular'' to 1 if rectangles map to rectangles after
     coordinate transformation with ``pltrl''. Otherwise, set
     ``rectangular'' to 0.  If ``rectangular'' is set to 1, plshade
     tries to save time by filling large rectangles. This optimization
     fails if the coordinate transformation distorts the shape of
     rectangles.  For example a plot in polor coordinates has to have
     rectangular set to 0.

`pltr'  (`void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)  ', input)
     Pointer to function that defines transformation between indices in
     array ``z'' and the world coordinates (C only). Transformation
     functions are provided in the PLplot library: `pltr0' (*note
     pltr0; Identity transformation for grid to world mapping::) for
     identity mapping, and `pltr1' (*note pltr1; Linear interpolation
     for grid to world mapping using singly dimensioned coord arrays::)
     and `pltr2' (*note pltr2; Linear interpolation for grid to world
     mapping using doubly dimensioned coord arrays [column dominant; as
     per normal C 2d arrays]::) for arbitrary mappings respectively
     defined by one- and two-dimensional arrays. In addition,
     user-supplied routines for the transformation can be used as well.
     Examples of all of these approaches are given in *Note Contour
     Plots from C: Contour Plots from C..  The transformation function
     should have the form given by any of `pltr0' (*note pltr0;
     Identity transformation for grid to world mapping::), `pltr1'
     (*note pltr1; Linear interpolation for grid to world mapping using
     singly dimensioned coord arrays::), or `pltr2' (*note pltr2;
     Linear interpolation for grid to world mapping using doubly
     dimensioned coord arrays [column dominant; as per normal C 2d
     arrays]::).

`pltr_data'  (`PLPointer', input)
     Extra parameter to help pass information to `pltr0' (*note pltr0;
     Identity transformation for grid to world mapping::), `pltr1'
     (*note pltr1; Linear interpolation for grid to world mapping using
     singly dimensioned coord arrays::), `pltr2' (*note pltr2; Linear
     interpolation for grid to world mapping using doubly dimensioned
     coord arrays [column dominant; as per normal C 2d arrays]::), or
     whatever routine that is externally supplied.


File: plplotdoc.info,  Node: plsmaj; Set length of major ticks,  Next: plsmem; Set the memory area to be plotted,  Prev: plshade1; Shade individual region on the basis of value,  Up: The Common API for PLplot

16.100 plsmaj: Set length of major ticks
========================================

     plsmaj (def, scale);

   This sets up the length of the major ticks. The actual length is the
product of the default length and a scaling factor as for character
height.

`def'  (`PLFLT', input)
     The default length of a major tick in millimeters, should be set
     to zero if the default length is to remain unchanged.

`scale'  (`PLFLT', input)
     Scale factor to be applied to default to get actual tick length.


File: plplotdoc.info,  Node: plsmem; Set the memory area to be plotted,  Next: plsmin; Set length of minor ticks,  Prev: plsmaj; Set length of major ticks,  Up: The Common API for PLplot

16.101 plsmem: Set the memory area to be plotted
================================================

     plsmem (maxx, maxy, plotmem);

   Set the memory area to be plotted (with the mem driver) as the `dev'
member of the stream structure. Also set the number of pixels in the
memory passed in `plotmem', which is a block of memory `maxy' by `maxx'
by 3 bytes long, say: 480 x 640 x 3 (Y, X, RGB)

   This memory will have to be freed by the user!

`maxx'  (`PLINT', input)
     Size of memory area in the X coordinate.

`maxy'  (`PLINT', input)
     Size of memory area in the Y coordinate.

`plotmem'  (`void *', input)
     Pointer to the beginning of the user-supplied memory area.


File: plplotdoc.info,  Node: plsmin; Set length of minor ticks,  Next: plsori; Set orientation,  Prev: plsmem; Set the memory area to be plotted,  Up: The Common API for PLplot

16.102 plsmin: Set length of minor ticks
========================================

     plsmin (def, scale);

   This sets up the length of the minor ticks and the length of the
terminals on error bars. The actual length is the product of the
default length and a scaling factor as for character height.

`def'  (`PLFLT', input)
     The default length of a minor tick in millimeters, should be set
     to zero if the default length is to remain unchanged.

`scale'  (`PLFLT', input)
     Scale factor to be applied to default to get actual tick length.


File: plplotdoc.info,  Node: plsori; Set orientation,  Next: plspage; Set page parameters,  Prev: plsmin; Set length of minor ticks,  Up: The Common API for PLplot

16.103 plsori: Set orientation
==============================

     plsori (ori);

   Sets the current orientation. If ``ori'' is equal to zero (default)
then landscape is used (x axis is parallel to the longest edge of the
page), otherwise portrait is used. This option is not supported by all
output drivers (in particular, most interactive screen drivers ignore
the orientation). This routine, if used, must be called before
initializing PLplot.

`ori'  (`PLINT', input)
     Orientation value (0 for landscape, 1 for portrait; the value is
     multiplied by 90 degrees to get the angle)


File: plplotdoc.info,  Node: plspage; Set page parameters,  Next: plspause; Set the pause [on end-of-page] status,  Prev: plsori; Set orientation,  Up: The Common API for PLplot

16.104 plspage: Set page parameters
===================================

     plspage (xp, yp, xleng, yleng, xoff, yoff);

   Sets the page configuration (optional). Not all parameters are
recognized by all drivers and the interpretation is device-dependent.
The X-window driver uses the length and offset parameters to determine
the window size and location. This routine, if used, must be called
before initializing PLplot.

`xp'  (`PLFLT', input)
     Number of pixels, x.

`yp'  (`PLFLT', input)
     Number of pixels, y.

`xleng'  (`PLINT ', input)
     Page length, x.

`yleng'  (`PLINT', input)
     Page length, y.

`xoff'  (`PLINT', input)
     Page offset, x.

`yoff'  (`PLINT', input)
     Page offset, y.


File: plplotdoc.info,  Node: plspause; Set the pause [on end-of-page] status,  Next: plsstrm; Set current output stream,  Prev: plspage; Set page parameters,  Up: The Common API for PLplot

16.105 plspause: Set the pause (on end-of-page) status
======================================================

     plspause (pause);

   Set the pause (on end-of-page) status.

`pause'  (`PLINT', input)
     If ``pause'' = 1 there will be a pause on end-of-page for those
     drivers which support this. Otherwise there is no pause.


File: plplotdoc.info,  Node: plsstrm; Set current output stream,  Next: plssub; Set the number of subpages in x and y,  Prev: plspause; Set the pause [on end-of-page] status,  Up: The Common API for PLplot

16.106 plsstrm: Set current output stream
=========================================

     plsstrm (strm);

   Sets the number of the current output stream. The stream number
defaults to 0 unless changed by this routine. The first use of this
routine must be followed by a call initializing PLplot (e.g. `plstar'
(*note plstar; Initialization::)).

`strm'  (`PLINT', input)
     The current stream number.


File: plplotdoc.info,  Node: plssub; Set the number of subpages in x and y,  Next: plssym; Set symbol size,  Prev: plsstrm; Set current output stream,  Up: The Common API for PLplot

16.107 plssub: Set the number of subpages in x and y
====================================================

     plssub (nx, ny);

   Set the number of subpages in x and y.

`nx'  (`PLINT', input)
     Number of windows in x direction (i.e., number of window columns).

`ny'  (`PLINT', input)
     Number of windows in y direction (i.e., number of window rows).


File: plplotdoc.info,  Node: plssym; Set symbol size,  Next: plstar; Initialization,  Prev: plssub; Set the number of subpages in x and y,  Up: The Common API for PLplot

16.108 plssym: Set symbol size
==============================

     plssym (def, scale);

   This sets up the size of all subsequent symbols drawn by `plpoin'
(*note plpoin; Plots a character at the specified points::) and `plsym'
(*note plsym; Plots a symbol at the specified points::). The actual
height of a symbol is the product of the default symbol size and a
scaling factor as for the character height.

`def'  (`PLFLT', input)
     The default height of a symbol in millimeters, should be set to
     zero if the default height is to remain unchanged.

`scale'  (`PLFLT', input)
     Scale factor to be applied to default to get actual symbol height.


File: plplotdoc.info,  Node: plstar; Initialization,  Next: plstart; Initialization,  Prev: plssym; Set symbol size,  Up: The Common API for PLplot

16.109 plstar: Initialization
=============================

     plstar (nx, ny);

   Initializing the plotting package. The program prompts for the
device keyword or number of the desired output device. Hitting a RETURN
in response to the prompt is the same as selecting the first device. If
only one device is enabled when PLplot is installed, `plstar' (*note
plstar; Initialization::) will issue no prompt. The output device is
divided into ``nx'' by ``ny'' subpages, each of which may be used
independently. The subroutine `pladv' (*note pladv; Advance the
[sub-]page::) is used to advance from one subpage to the next.

`nx'  (`PLINT', input)
     Number of subpages to divide output page in the horizontal
     direction.

`ny'  (`PLINT', input)
     Number of subpages to divide output page in the vertical direction.


File: plplotdoc.info,  Node: plstart; Initialization,  Next: plstripa; Add a point to a stripchart,  Prev: plstar; Initialization,  Up: The Common API for PLplot

16.110 plstart: Initialization
==============================

     plstart (device, nx, ny);

   Alternative to `plstar' (*note plstar; Initialization::) for
initializing the plotting package. The ``device'' name keyword for the
desired output device must be supplied as an argument. The device
keywords are the same as those printed out by `plstar' (*note plstar;
Initialization::). If the requested device is not available, or if the
input string is empty or begins with "?", the prompted startup of
`plstar' (*note plstar; Initialization::) is used. This routine also
divides the output device into ``nx'' by ``ny'' subpages, each of which
may be used independently. The subroutine `pladv' (*note pladv; Advance
the [sub-]page::) is used to advance from one subpage to the next.

`device'  (`const char *', input)
     Device name (keyword) of the required output device. If NULL or if
     the first character is a "?", the normal (prompted) startup is
     used.

`nx'  (`PLINT', input)
     Number of subpages to divide output page in the horizontal
     direction.

`ny'  (`PLINT', input)
     Number of subpages to divide output page in the vertical direction.


File: plplotdoc.info,  Node: plstripa; Add a point to a stripchart,  Next: plstripc; Create a 4-pen stripchart,  Prev: plstart; Initialization,  Up: The Common API for PLplot

16.111 plstripa: Add a point to a stripchart
============================================

     plstripa (id, p, x, y);

   Add a point to a given pen of a given stripchart.  There is no need
for all pens to have the same number of points or to be equally sampled
in the x coordinate.  Allocates memory and rescales as necessary.

`id'  (`PLINT', input)
     Identification number (set up in `plstripc' (*note plstripc;
     Create a 4-pen stripchart::)) of the stripchart.

`p'  (`PLINT', input)
     Pen number (ranges from 0 to 3).

`x'  (`PLFLT', input)
     X coordinate of point to plot.

`y'  (`PLFLT', input)
     Y coordinate of point to plot.


File: plplotdoc.info,  Node: plstripc; Create a 4-pen stripchart,  Next: plstripd; Deletes and releases memory used by a stripchart,  Prev: plstripa; Add a point to a stripchart,  Up: The Common API for PLplot

16.112 plstripc: Create a 4-pen stripchart
==========================================

     plstripc (id, xspec, yspec, xmin, xmax, xjump, ymin, ymax, xlpos,
     ylpos, y_ascl, acc, colbox, collab, colline, styline, legline[],
     labx, laby, labtop);

   Create a 4-pen stripchart, to be used afterwards by `plstripa'
(*note plstripa; Add a point to a stripchart::)

`id'  (`PLINT *', output)
     Identification number of stripchart to use on `plstripa' (*note
     plstripa; Add a point to a stripchart::) and `plstripd' (*note
     plstripd; Deletes and releases memory used by a stripchart::).

`xspec'  (`char *', input)
     X-axis specification as in `plbox' (*note plbox; Draw a box with
     axes; etc::).

`yspec'  (`char *', input)
     Y-axis specification as in `plbox' (*note plbox; Draw a box with
     axes; etc::).

`xmin'  (`PLFLT', input)
     Initial coordinates of plot box; they will change as data are
     added.

`xmax'  (`PLFLT', input)
     Initial coordinates of plot box; they will change as data are
     added.

`xjump'  (`PLFLT', input)
     When x attains ``xmax'', the length of the plot is multiplied by
     the factor `(1 + `xjump')'.

`ymin'  (`PLFLT', input)
     Initial coordinates of plot box; they will change as data are
     added.

`ymax'  (`PLFLT', input)
     Initial coordinates of plot box; they will change as data are
     added.

`xlpos'  (`PLFLT', input)
     X legend box position (range from 0 to 1).

`ylpos'  (`PLFLT', input)
     Y legend box position (range from 0 to 1).

`y_ascl'  (`PLINT', input)
     Autoscale y between x jumps (1) or not (0).

`acc'  (`PLINT', input)
     Accumulate strip plot (1) or slide (0).

`colbox'  (`PLINT', input)
     Plot box color index (cmap0).

`collab'  (`PLINT', input)
     Legend color index (cmap0).

`colline'  (`PLINT *', input)
     Pointer to array with color indices (cmap0) for the 4 pens.

`styline'  (`PLINT *', input)
     Pointer to array with line styles for the 4 pens.

`legline'  (`char **', input)
     Pointer to character array containing legends for the 4 pens.

`labx'  (`char *', input)
     X-axis label.

`laby'  (`char *', input)
     Y-axis label.

`labtop'  (`char *', input)
     Plot title.


File: plplotdoc.info,  Node: plstripd; Deletes and releases memory used by a stripchart,  Next: plstyl; Set line style,  Prev: plstripc; Create a 4-pen stripchart,  Up: The Common API for PLplot

16.113 plstripd: Deletes and releases memory used by a stripchart
=================================================================

     plstripd (id);

   Deletes and releases memory used by a stripchart.

`id'  (`PLINT', input)
     Identitification number of stripchart to delete.


File: plplotdoc.info,  Node: plstyl; Set line style,  Next: plsurf3d; Plot shaded 3-d surface plot,  Prev: plstripd; Deletes and releases memory used by a stripchart,  Up: The Common API for PLplot

16.114 plstyl: Set line style
=============================

     plstyl (nels, mark, space);

   This sets up the line style for all lines subsequently drawn. A line
consists of segments in which the pen is alternately down and up.  The
lengths of these segments are passed in the arrays ``mark'' and
``space'' respectively. The number of mark-space pairs is specified by
``nels''. In order to return the line style to the default continuous
line, `plstyl' (*note plstyl; Set line style::) should be called with
``nels'=0'.(see also `pllsty' (*note pllsty; Select line style::))

`nels'  (`PLINT', input)
     The number of ``mark'' and ``space'' elements in a line. Thus a
     simple broken line can be obtained by setting ``nels'=1'. A
     continuous line is specified by setting ``nels'=0'.

`mark'  (`PLINT *', input)
     Pointer to array with the lengths of the segments during which the
     pen is down, measured in micrometers.

`space'  (`PLINT *', input)
     Pointer to array with the lengths of the segments during which the
     pen is up, measured in micrometers.


File: plplotdoc.info,  Node: plsurf3d; Plot shaded 3-d surface plot,  Next: plsvect; Set arrow style for vector plots,  Prev: plstyl; Set line style,  Up: The Common API for PLplot

16.115 plsurf3d: Plot shaded 3-d surface plot
=============================================

     plsurf3d (x, y, z, nx, ny, opt, clevel, nlevel);

   Plots a three dimensional shaded surface plot within the environment
set up by `plw3d' (*note plw3d; Set up window for 3-d plotting::). The
surface is defined by the two-dimensional array ``z'[`nx'][`ny']', the
point ``z'[i][j]' being the value of the function at `(`x'[i],
`y'[j])'. Note that the points in arrays ``x'' and ``y'' do not need to
be equally spaced, but must be stored in ascending order.  For further
details see *Note Three Dimensional Surface Plots: Three Dimensional
Surface Plots..

`x'  (`PLFLT *', input)
     Pointer to set of x coordinate values at which the function is
     evaluated.

`y'  (`PLFLT *', input)
     Pointer to set of y coordinate values at which the function is
     evaluated.

`z'  (`PLFLT **', input)
     Pointer to a vectored two-dimensional array with set of function
     values.

`nx'  (`PLINT', input)
     Number of ``x'' values at which function is evaluated.

`ny'  (`PLINT', input)
     Number of ``y'' values at which function is evaluated.

`opt'  (`PLINT', input)
     Determines the way in which the surface is represented. To specify
     more than one option just add the options, e.g. FACETED + SURF_CONT

        * ``opt'=FACETED': Network of lines is drawn connecting points
          at which function is defined.

        * ``opt'=BASE_CONT': A contour plot is drawn at the base XY
          plane using parameters `nlevel' and `clevel'.

        * ``opt'=SURF_CONT': A contour plot is drawn at the surface
          plane using parameters `nlevel' and `clevel'.

        * ``opt'=DRAW_SIDES': draws a curtain between the base XY plane
          and the borders of the plotted function.

        * ``opt'=MAG_COLOR': the surface is colored according to the
          value of Z; if `MAG_COLOR' is not used, then the default the
          surface is colored according to the intensity of the
          reflected light in the surface from a light source whose
          position is set using `pllightsource' (*note pllightsource;
          Sets the 3D position of the light source::).

`clevel'  (`PLFLT *', input)
     Pointer to the array that defines the contour level spacing.

`nlevel'  (`PLINT', input)
     Number of elements in the `clevel' array.


File: plplotdoc.info,  Node: plsvect; Set arrow style for vector plots,  Next: plsvpa; Specify viewport in absolute coordinates,  Prev: plsurf3d; Plot shaded 3-d surface plot,  Up: The Common API for PLplot

16.116 plsvect: Set arrow style for vector plots
================================================

     plsvect (arrowx, arrowy, npts, fill);

   Set the style for the arrow used by `plvect' (*note plvect; Vector
plot::) to plot vectors.

`arrowx, arrowy'  (`PLFLT *',input)
     Pointers to a pair of arrays containing the x and y points which
     make up the arrow. The arrow is plotted by joining these points to
     form a polygon. The scaling assumes that the x and y points in the
     arrow lie in the range `-0.5 <= x,y <= 0.5'.

`npts'  (`PLINT',input)
     Number of points in the arrays ``arrowx'' and ``arrowy''.

`fill'  (`PLINT',input)
     If ``fill' = 0' then the arrow is open, if ``fill' = 1' then the
     arrow is filled.


File: plplotdoc.info,  Node: plsvpa; Specify viewport in absolute coordinates,  Next: plsxax; Set x axis parameters,  Prev: plsvect; Set arrow style for vector plots,  Up: The Common API for PLplot

16.117 plsvpa: Specify viewport in absolute coordinates
=======================================================

     plsvpa (xmin, xmax, ymin, ymax);

   Alternate routine to `plvpor' (*note plvpor; Specify viewport using
coordinates::) for setting up the viewport. This routine should be used
only if the viewport is required to have a definite size in
millimeters. The routine `plgspa' (*note plgspa; Get current subpage
parameters::) is useful for finding out the size of the current subpage.

`xmin'  (`PLFLT', input)
     The distance of the left-hand edge of the viewport from the
     left-hand edge of the subpage in millimeters.

`xmax'  (`PLFLT', input)
     The distance of the right-hand edge of the viewport from the
     left-hand edge of the subpage in millimeters.

`ymin'  (`PLFLT', input)
     The distance of the bottom edge of the viewport from the bottom
     edge of the subpage in millimeters.

`ymax'  (`PLFLT', input)
     The distance of the top edge of the viewport from the bottom edge
     of the subpage in millimeters.


File: plplotdoc.info,  Node: plsxax; Set x axis parameters,  Next: plsyax; Set y axis parameters,  Prev: plsvpa; Specify viewport in absolute coordinates,  Up: The Common API for PLplot

16.118 plsxax: Set x axis parameters
====================================

     plsxax (digmax, digits);

   Sets values of the ``digmax'' and ``digits'' flags for the x axis.
See *Note Annotating the Viewport: Annotating the Viewport. for more
information.

`digmax'  (`PLINT', input)
     Variable to set the maximum number of digits for the x axis. If
     nonzero, the printed label will be switched to a floating point
     representation when the number of digits exceeds ``digmax''.

`digits'  (`PLINT', input)
     Field digits value. Currently, changing its value here has no
     effect since it is set only by `plbox' (*note plbox; Draw a box
     with axes; etc::) or ` plbox3' (*note plbox3; Draw a box with
     axes; etc; in 3-d::). However, the user may obtain its value after
     a call to either of these functions by calling `plgxax' (*note
     plgxax; Get x axis parameters::).


File: plplotdoc.info,  Node: plsyax; Set y axis parameters,  Next: plsym; Plots a symbol at the specified points,  Prev: plsxax; Set x axis parameters,  Up: The Common API for PLplot

16.119 plsyax: Set y axis parameters
====================================

     plsyax (digmax, digits);

   Identical to `plsxax' (*note plsxax; Set x axis parameters::),
except that arguments are flags for y axis.  See the description of
`plsxax' (*note plsxax; Set x axis parameters::) for more detail.

`digmax'  (`PLINT', input)
     Variable to set the maximum number of digits for the y axis. If
     nonzero, the printed label will be switched to a floating point
     representation when the number of digits exceeds ``digmax''.

`digits'  (`PLINT', input)
     Field digits value. Currently, changing its value here has no
     effect since it is set only by `plbox' (*note plbox; Draw a box
     with axes; etc::) or ` plbox3' (*note plbox3; Draw a box with
     axes; etc; in 3-d::). However, the user may obtain its value after
     a call to either of these functions by calling `plgyax' (*note
     plgyax; Get y axis parameters::).


File: plplotdoc.info,  Node: plsym; Plots a symbol at the specified points,  Next: plszax; Set z axis parameters,  Prev: plsyax; Set y axis parameters,  Up: The Common API for PLplot

16.120 plsym: Plots a symbol at the specified points
====================================================

     plsym (n, x, y, code);

   Marks out a set of ``n'' points at positions `(`x'[i], `y'[i])',
using the symbol defined by ``code''. The code is interpreted as an
index in the Hershey font tables.

`n'  (`PLINT', input)
     Number of points to be marked.

`x'  (`PLFLT *', input)
     Pointer to array with set of x coordinate values for the points.

`y'  (`PLFLT *', input)
     Pointer to array with set of y coordinate values for the points.

`code'  (`PLINT', input)
     Code number for the symbol to be plotted.


File: plplotdoc.info,  Node: plszax; Set z axis parameters,  Next: pltext; Switch to text screen,  Prev: plsym; Plots a symbol at the specified points,  Up: The Common API for PLplot

16.121 plszax: Set z axis parameters
====================================

     plszax (digmax, digits);

   Identical to `plsxax' (*note plsxax; Set x axis parameters::),
except that arguments are flags for z axis.  See the description of
`plsxax' (*note plsxax; Set x axis parameters::) for more detail.

`digmax'  (`PLINT', input)
     Variable to set the maximum number of digits for the z axis. If
     nonzero, the printed label will be switched to a floating point
     representation when the number of digits exceeds ``digmax''.

`digits'  (`PLINT', input)
     Field digits value. Currently, changing its value here has no
     effect since it is set only by `plbox' (*note plbox; Draw a box
     with axes; etc::) or ` plbox3' (*note plbox3; Draw a box with
     axes; etc; in 3-d::). However, the user may obtain its value after
     a call to either of these functions by calling `plgzax' (*note
     plgzax; Get z axis parameters::).


File: plplotdoc.info,  Node: pltext; Switch to text screen,  Next: plvasp; Specify viewport using aspect ratio only,  Prev: plszax; Set z axis parameters,  Up: The Common API for PLplot

16.122 pltext: Switch to text screen
====================================

     pltext ();

   Sets an interactive device to text mode, used in conjunction with
`plgra' (*note plgra; Switch to graphics screen::) to allow graphics
and text to be interspersed. On a device which supports separate text
and graphics windows, this command causes control to be switched to the
text window. This can be useful for printing diagnostic messages or
getting user input, which would otherwise interfere with the plots. The
program must switch back to the graphics window before issuing plot
commands, as the text (or console) device will probably become quite
confused otherwise. If already in text mode, this command is ignored.
It is also ignored on devices which only support a single window or use
a different method for shifting focus (see also `plgra' (*note plgra;
Switch to graphics screen::)).


File: plplotdoc.info,  Node: plvasp; Specify viewport using aspect ratio only,  Next: plvect; Vector plot,  Prev: pltext; Switch to text screen,  Up: The Common API for PLplot

16.123 plvasp: Specify viewport using aspect ratio only
=======================================================

     plvasp (aspect);

   Sets the viewport so that the ratio of the length of the y axis to
that of the x axis is equal to ``aspect''.

`aspect'  (`PLFLT', input)
     Ratio of length of y axis to length of x axis.


File: plplotdoc.info,  Node: plvect; Vector plot,  Next: plvpas; Specify viewport using coordinates and aspect ratio,  Prev: plvasp; Specify viewport using aspect ratio only,  Up: The Common API for PLplot

16.124 plvect: Vector plot
==========================

     plvect (u, v, nx, ny, scale, pltr, pltr_data);

   Draws a vector plot of the vector
`(`u'[`nx'][`ny'],`v'[`nx'][`ny'])'.  The scaling factor for the
vectors is given by ``scale''. A transformation routine pointed to by
``pltr'' with a pointer ``pltr_data'' for additional data required by
the transformation routine is used to map indices within the array to
the world coordinates. The style of the vector arrow may be set using
`plsvect' (*note plsvect; Set arrow style for vector plots::).

`u, v'  (`PLFLT **', input)
     Pointers to a pair of vectored two-dimensional arrays containing
     the x and y components of the vector data to be plotted.

`nx, ny'  (`PLINT', input)
     Physical dimensions of the arrays ``u'' and ``v''.

`scale'  (`PLFLT', input)
     Parameter to control the scaling factor of the vectors for
     plotting.  If ``scale' = 0' then the scaling factor is
     automatically calculated for the data.  If ``scale' < 0' then the
     scaling factor is automatically calculated for the data and then
     multiplied by `-`scale''.  If ``scale' > 0' then the scaling
     factor is set to ``scale''.

`pltr'  (`void (*) (PLFLT, PLFLT, PLFLT *, PLFLT *, PLPointer)  ', input)
     Pointer to function that defines transformation between indices in
     array ``z'' and the world coordinates (C only). Transformation
     functions are provided in the PLplot library: `pltr0' (*note
     pltr0; Identity transformation for grid to world mapping::) for
     identity mapping, and `pltr1' (*note pltr1; Linear interpolation
     for grid to world mapping using singly dimensioned coord arrays::)
     and `pltr2' (*note pltr2; Linear interpolation for grid to world
     mapping using doubly dimensioned coord arrays [column dominant; as
     per normal C 2d arrays]::) for arbitrary mappings respectively
     defined by one- and two-dimensional arrays. In addition,
     user-supplied routines for the transformation can be used as well.
     Examples of all of these approaches are given in *Note Contour
     Plots from C: Contour Plots from C..  The transformation function
     should have the form given by any of `pltr0' (*note pltr0;
     Identity transformation for grid to world mapping::), `pltr1'
     (*note pltr1; Linear interpolation for grid to world mapping using
     singly dimensioned coord arrays::), or `pltr2' (*note pltr2;
     Linear interpolation for grid to world mapping using doubly
     dimensioned coord arrays [column dominant; as per normal C 2d
     arrays]::).

`pltr_data'  (`PLPointer', input)
     Extra parameter to help pass information to `pltr0' (*note pltr0;
     Identity transformation for grid to world mapping::), `pltr1'
     (*note pltr1; Linear interpolation for grid to world mapping using
     singly dimensioned coord arrays::), `pltr2' (*note pltr2; Linear
     interpolation for grid to world mapping using doubly dimensioned
     coord arrays [column dominant; as per normal C 2d arrays]::), or
     whatever routine that is externally supplied.


File: plplotdoc.info,  Node: plvpas; Specify viewport using coordinates and aspect ratio,  Next: plvpor; Specify viewport using coordinates,  Prev: plvect; Vector plot,  Up: The Common API for PLplot

16.125 plvpas: Specify viewport using coordinates and aspect ratio
==================================================================

     plvpas (xmin, xmax, ymin, ymax, aspect);

   Device-independent routine for setting up the viewport. The viewport
is chosen to be the largest with the given aspect ratio that fits
within the specified region (in terms of normalized subpage
coordinates). This routine is functionally equivalent to `plvpor'
(*note plvpor; Specify viewport using coordinates::) when a "natural"
aspect ratio (0.0) is chosen. Unlike `plvasp' (*note plvasp; Specify
viewport using aspect ratio only::), this routine reserves no extra
space at the edges for labels.

`xmin'  (`PLFLT', input)
     The normalized subpage coordinate of the left-hand edge of the
     viewport.

`xmax'  (`PLFLT', input)
     The normalized subpage coordinate of the right-hand edge of the
     viewport.

`ymin'  (`PLFLT', input)
     The normalized subpage coordinate of the bottom edge of the
     viewport.

`ymax'  (`PLFLT', input)
     The normalized subpage coordinate of the top edge of the viewport.

`aspect'  (`PLFLT', input)
     Ratio of length of y axis to length of x axis.


File: plplotdoc.info,  Node: plvpor; Specify viewport using coordinates,  Next: plvsta; Select standard viewport,  Prev: plvpas; Specify viewport using coordinates and aspect ratio,  Up: The Common API for PLplot

16.126 plvpor: Specify viewport using coordinates
=================================================

     plvpor (xmin, xmax, ymin, ymax);

   Device-independent routine for setting up the viewport. This defines
the viewport in terms of normalized subpage coordinates which run from
0.0 to 1.0 (left to right and bottom to top) along each edge of the
current subpage. Use the alternate routine `plsvpa' (*note plsvpa;
Specify viewport in absolute coordinates::) in order to create a
viewport of a definite size.

`xmin'  (`PLFLT', input)
     The normalized subpage coordinate of the left-hand edge of the
     viewport.

`xmax'  (`PLFLT', input)
     The normalized subpage coordinate of the right-hand edge of the
     viewport.

`ymin'  (`PLFLT', input)
     The normalized subpage coordinate of the bottom edge of the
     viewport.

`ymax'  (`PLFLT', input)
     The normalized subpage coordinate of the top edge of the viewport.


File: plplotdoc.info,  Node: plvsta; Select standard viewport,  Next: plw3d; Set up window for 3-d plotting,  Prev: plvpor; Specify viewport using coordinates,  Up: The Common API for PLplot

16.127 plvsta: Select standard viewport
=======================================

     plvsta ();

   Sets up a standard viewport, leaving a left-hand margin of seven
character heights, and four character heights around the other three
sides.


File: plplotdoc.info,  Node: plw3d; Set up window for 3-d plotting,  Next: plwid; Set pen width,  Prev: plvsta; Select standard viewport,  Up: The Common API for PLplot

16.128 plw3d: Set up window for 3-d plotting
============================================

     plw3d (basex, basey, height, xmin, xmax, ymin, ymax, zmin, zmax,
     alt, az);

   Sets up a window for a three-dimensional surface plot within the
currently defined two-dimensional window. The enclosing box for the
surface plot defined by ``xmin'', ``xmax'', ``ymin'', ``ymax'',
``zmin'' and ``zmax'' in user-coordinate space is mapped into a box of
world coordinate size ``basex'' by ``basey'' by ``height'' so that
``xmin'' maps to `-`basex'/2', ``xmax'' maps to ``basex'/2', ``ymin''
maps to `-`basey'/2', ``ymax'' maps to ``basey'/2', ``zmin'' maps to
`0' and ``zmax'' maps to ``height''. The resulting world-coordinate box
is then viewed by an observer at altitude ``alt'' and azimuth ``az''.
This routine must be called before ` plbox3' (*note plbox3; Draw a box
with axes; etc; in 3-d::) or `plot3d' (*note plot3d; Plot 3-d surface
plot::). For a more complete description of three-dimensional plotting
see *Note Three Dimensional Surface Plots: Three Dimensional Surface
Plots..

`basex'  (`PLFLT', input)
     The x coordinate size of the world-coordinate box.

`basey'  (`PLFLT', input)
     The y coordinate size of the world-coordinate box.

`height'  (`PLFLT', input)
     The z coordinate size of the world-coordinate box.

`xmin'  (`PLFLT', input)
     The minimum user x coordinate value.

`xmax'  (`PLFLT', input)
     The maximum user x coordinate value.

`ymin'  (`PLFLT', input)
     The minimum user y coordinate value.

`ymax'  (`PLFLT', input)
     The maximum user y coordinate value.

`zmin'  (`PLFLT', input)
     The minimum user z coordinate value.

`zmax'  (`PLFLT', input)
     The maximum user z coordinate value.

`alt'  (`PLFLT', input)
     The viewing altitude in degrees above the xy plane.

`az'  (`PLFLT', input)
     The viewing azimuth in degrees. When ``az'=0', the observer is
     looking face onto the zx plane, and as ``az'' is increased, the
     observer moves clockwise around the box when viewed from above the
     xy plane.


File: plplotdoc.info,  Node: plwid; Set pen width,  Next: plwind; Specify world coordinates of viewport boundaries,  Prev: plw3d; Set up window for 3-d plotting,  Up: The Common API for PLplot

16.129 plwid: Set pen width
===========================

     plwid (width);

   Sets the pen width.

`width'  (`PLINT', input)
     The desired pen width. If ``width'' is negative or the same as the
     previous value no action is taken.  ``width' = 0' should be
     interpreted as as the minimum valid pen width for the device. The
     interpretation of positive ``width'' values is also device
     dependent.


File: plplotdoc.info,  Node: plwind; Specify world coordinates of viewport boundaries,  Next: plxormod; Enter or leave xor mode,  Prev: plwid; Set pen width,  Up: The Common API for PLplot

16.130 plwind: Specify world coordinates of viewport boundaries
===============================================================

     plwind (xmin, xmax, ymin, ymax);

   Sets up the world coordinates of the edges of the viewport.

`xmin'  (`PLFLT', input)
     The world x coordinate of the left-hand edge of the viewport.

`xmax'  (`PLFLT', input)
     The world x coordinate of the right-hand edge of the viewport.

`ymin'  (`PLFLT', input)
     The world y coordinate of the bottom edge of the viewport.

`ymax'  (`PLFLT', input)
     The world y coordinate of the top edge of the viewport.


File: plplotdoc.info,  Node: plxormod; Enter or leave xor mode,  Prev: plwind; Specify world coordinates of viewport boundaries,  Up: The Common API for PLplot

16.131 plxormod: Enter or leave xor mode
========================================

     plxormod (mode, status);

   Enter (mode !=0) or leave (mode == 0) xor mode for those drivers
(e.g., the xwin driver) that support it. Enables erasing plots by
drawing twice the same line, symbol, etc. If driver is not capable of
xor operation returns status of 0.

`mode'  (`PLINT', input)
     mode != 0 means enter xor mode and mode == 0 means leave xor mode.

`status'  (`PLINT *', output)
     Pointer to status. Returned status == 1 (0) means driver is capable
     (incapable) of xor mode.


File: plplotdoc.info,  Node: The Specialized C API for PLplot,  Next: The Specialized Fortran API for PLplot,  Prev: The Common API for PLplot,  Up: Top

17 The Specialized C API for PLplot
***********************************

The purpose of this chapter is to document the API for every C function
in PLplot (other than language bindings) that is not part of the common
API that has already been documented in *Note The Common API for
PLplot: The Common API for PLplot..

   This chapter is a work that is just starting. There are many C
functions in the code base that are not part of the common API, and we
haven't even gotten to the point of listing them all. What gets
documented here now is whatever C-explicit code we are trying to
understand at the time.

* Menu:

* plP_checkdriverinit; Checks to see if any of the specified drivers have been initialized::
* plP_getinitdriverlist; Get the initialized-driver list::
* plabort; Error abort::
* plexit; Error exit::
* plgfile; Get output file handle::
* plsabort; Set abort handler::
* plsexit; Set exit handler::
* plsfile; Set output file handle::
* pltr0; Identity transformation for grid to world mapping::
* pltr1; Linear interpolation for grid to world mapping using singly dimensioned coord arrays::
* pltr2; Linear interpolation for grid to world mapping using doubly dimensioned coord arrays [column dominant; as per normal C 2d arrays]::


File: plplotdoc.info,  Node: plP_checkdriverinit; Checks to see if any of the specified drivers have been initialized,  Next: plP_getinitdriverlist; Get the initialized-driver list,  Up: The Specialized C API for PLplot

17.1 plP_checkdriverinit: Checks to see if any  of the specified drivers have been initialized
==============================================================================================

     plP_checkdriverinit (list);

   Checks to see if any of the specified drivers have been initialized.
Function tests a space-delimited list of driver names to see how many
of the given drivers have been initialized, and how often.  The return
code of the function is: `0' if no matching drivers were found to have
been initialized; `-1' if an error occurred allocating the internal
buffer; or, a positive number indicating the number of streams
encountered that belong to drivers on the provided list. This function
invokes `plP_getinitdriverlist' (*note plP_getinitdriverlist; Get the
initialized-driver list::) internally to get a complete list of drivers
that have been initialized in order to compare with the driver names
specified in the argument list to `plP_checkdriverinit' (*note
plP_checkdriverinit; Checks to see if any of the specified drivers have
been initialized::).

`list'  (`char *', input)
     Pointer to character string specifying a space-delimited list of
     driver names, e.g., `"bmp jpeg tiff"'.


File: plplotdoc.info,  Node: plP_getinitdriverlist; Get the initialized-driver list,  Next: plabort; Error abort,  Prev: plP_checkdriverinit; Checks to see if any of the specified drivers have been initialized,  Up: The Specialized C API for PLplot

17.2 plP_getinitdriverlist: Get the initialized-driver  list
============================================================

     plP_getinitdriverlist (text_buffer);

   Get the initialized-driver list. Function returns a space-delimited
list of the currently initialized drivers or streams. If more than one
stream is using the same driver, then its name will be returned more
than once. The function can be analogously thought of as also returning
the names of the active streams. Invoked internally by
`plP_checkdriverinit' (*note plP_checkdriverinit; Checks to see if any
of the specified drivers have been initialized::).

`text_buffer'  (`char *', output)
     Pointer to a user-allocated buffer to hold the result. The user
     must ensure the buffer is big enough to hold the result.


File: plplotdoc.info,  Node: plabort; Error abort,  Next: plexit; Error exit,  Prev: plP_getinitdriverlist; Get the initialized-driver list,  Up: The Specialized C API for PLplot

17.3 plabort: Error abort
=========================

     plabort (message);

   This routine is to be used when something goes wrong that doesn't
require calling `plexit' (*note plexit; Error exit::) but for which
there is no useful recovery.  It calls the abort handler defined via
`plsabort' (*note plsabort; Set abort handler::), does some cleanup and
returns. The user can supply his/her own abort handler and pass it in
via `plsabort' (*note plsabort; Set abort handler::).

`message'  (`char *', input)
     Abort message.


File: plplotdoc.info,  Node: plexit; Error exit,  Next: plgfile; Get output file handle,  Prev: plabort; Error abort,  Up: The Specialized C API for PLplot

17.4 plexit: Error exit
=======================

     plexit (message);

   This routine is called in case an error is encountered during
execution of a PLplot routine. It prints the error message, tries to
release allocated resources, calls the handler prvided by `plsexit'
(*note plsexit; Set exit handler::) and then exits. If cleanup needs to
be done in the driver program then the user may want to supply his/her
own exit handler and pass it in via `plsexit' (*note plsexit; Set exit
handler::). This function should either call `plend' (*note plend; End
plotting session::) before exiting, or simply return.

`message'  (`char *', input)
     Error message.


File: plplotdoc.info,  Node: plgfile; Get output file handle,  Next: plsabort; Set abort handler,  Prev: plexit; Error exit,  Up: The Specialized C API for PLplot

17.5 plgfile: Get output file handle
====================================

     plgfile (file);

   Gets the current output file handle, if applicable.

`file'  (`FILE **', output)
     File pointer to current output file.


File: plplotdoc.info,  Node: plsabort; Set abort handler,  Next: plsexit; Set exit handler,  Prev: plgfile; Get output file handle,  Up: The Specialized C API for PLplot

17.6 plsabort: Set abort handler
================================

     plsabort (handler);

   Sets an optional user abort handler. See `plabort' (*note plabort;
Error abort::) for details.

`handler'  (`void (*) (char *)', input)
     Error abort handler.


File: plplotdoc.info,  Node: plsexit; Set exit handler,  Next: plsfile; Set output file handle,  Prev: plsabort; Set abort handler,  Up: The Specialized C API for PLplot

17.7 plsexit: Set exit handler
==============================

     plsexit (handler);

   Sets an optional user exit handler. See `plexit' (*note plexit;
Error exit::) for details.

`handler'  (`int (*) (char *)', input)
     Error exit handler.


File: plplotdoc.info,  Node: plsfile; Set output file handle,  Next: pltr0; Identity transformation for grid to world mapping,  Prev: plsexit; Set exit handler,  Up: The Specialized C API for PLplot

17.8 plsfile: Set output file handle
====================================

     plsfile (file);

   Sets the current output file handle, if applicable. If the file has
has not been previously opened and is required by the driver, the user
will be prompted for the file name. This routine, if used, must be
called before initializing PLplot.

`file'  (`FILE *', input)
     File pointer.


File: plplotdoc.info,  Node: pltr0; Identity transformation for grid to world mapping,  Next: pltr1; Linear interpolation for grid to world mapping using singly dimensioned coord arrays,  Prev: plsfile; Set output file handle,  Up: The Specialized C API for PLplot

17.9 pltr0: Identity transformation for grid to world mapping
=============================================================

     pltr0 (x, y, tx, ty, pltr_data);

   Identity transformation for grid to world mapping.  This routine can
be used both for `plcont' (*note plcont; Contour plot::) and `plshade'
(*note plshade; Shade individual region on the basis of value::).  See
also *Note Contour Plots from C: Contour Plots from C. and *Note Shade
Plots from C: Shade Plots from C..

`x'  (`PLFLT', input)
     X-position in grid coordinates.

`y'  (`PLFLT', input)
     Y-position in grid coordinates.

`tx'  (`PLFLT *', output)
     X-position in world coordinates.

`ty'  (`PLFLT *', output)
     Y-position in world coordinates.

`pltr_data'  (`PLPointer', input)
     Pointer to additional input data that is passed as an argument to
     `plcont' (*note plcont; Contour plot::) or `plshade' (*note
     plshade; Shade individual region on the basis of value::) and then
     on to the grid to world transformation routine.


File: plplotdoc.info,  Node: pltr1; Linear interpolation for grid to world mapping using singly dimensioned coord arrays,  Next: pltr2; Linear interpolation for grid to world mapping using doubly dimensioned coord arrays [column dominant; as per normal C 2d arrays],  Prev: pltr0; Identity transformation for grid to world mapping,  Up: The Specialized C API for PLplot

17.10 pltr1: Linear interpolation for grid to world mapping using singly dimensioned coord arrays
=================================================================================================

     pltr1 (x, y, tx, ty, pltr_data);

   Linear interpolation for grid to world mapping using singly
dimensioned coord arrays.  This routine can be used both for `plcont'
(*note plcont; Contour plot::) and `plshade' (*note plshade; Shade
individual region on the basis of value::).  See also *Note Contour
Plots from C: Contour Plots from C. and *Note Shade Plots from C: Shade
Plots from C..

`x'  (`PLFLT', input)
     X-position in grid coordinates.

`y'  (`PLFLT', input)
     Y-position in grid coordinates.

`tx'  (`PLFLT *', output)
     X-position in world coordinates.

`ty'  (`PLFLT *', output)
     Y-position in world coordinates.

`pltr_data'  (`PLPointer', input)
     Pointer to additional input data that is passed as an argument to
     `plcont' (*note plcont; Contour plot::) or `plshade' (*note
     plshade; Shade individual region on the basis of value::) and then
     on to the grid to world transformation routine.


File: plplotdoc.info,  Node: pltr2; Linear interpolation for grid to world mapping using doubly dimensioned coord arrays [column dominant; as per normal C 2d arrays],  Prev: pltr1; Linear interpolation for grid to world mapping using singly dimensioned coord arrays,  Up: The Specialized C API for PLplot

17.11 pltr2: Linear interpolation for grid to world  mapping using doubly dimensioned coord arrays (column  dominant, as per normal C 2d arrays)
================================================================================================================================================

     pltr2 (x, y, tx, ty, pltr_data);

   Linear interpolation for grid to world mapping using doubly
dimensioned coord arrays (column dominant, as per normal C 2d arrays).
This routine can be used both for `plcont' (*note plcont; Contour
plot::) and `plshade' (*note plshade; Shade individual region on the
basis of value::).  See also *Note Contour Plots from C: Contour Plots
from C. and *Note Shade Plots from C: Shade Plots from C..

`x'  (`PLFLT', input)
     X-position in grid coordinates.

`y'  (`PLFLT', input)
     Y-position in grid coordinates.

`tx'  (`PLFLT *', output)
     X-position in world coordinates.

`ty'  (`PLFLT *', output)
     Y-position in world coordinates.

`pltr_data'  (`PLPointer', input)
     Pointer to additional input data that is passed as an argument to
     `plcont' (*note plcont; Contour plot::) or `plshade' (*note
     plshade; Shade individual region on the basis of value::) and then
     on to the grid to world transformation routine.


File: plplotdoc.info,  Node: The Specialized Fortran API for PLplot,  Next: API compatibility definition,  Prev: The Specialized C API for PLplot,  Up: Top

18 The Specialized Fortran API for PLplot
*****************************************

The purpose of this Chapter is to document the API for each Fortran
function in PLplot that differs substantially (usually in argument
lists) from the common API that has already been documented in *Note
The Common API for PLplot: The Common API for PLplot..

   Normally, the common API is wrapped in such a way for Fortran that
there is and one-to-one correspondence between each fortran and C
argument (see *Note Fortran Language: Fortran Language.  for
discussion). However, for certain routines documented in this chapter
the fortran argument lists necessarily differ substantially from the C
versions.

   This chapter is incomplete and NEEDS DOCUMENTATION of, e.g., the
fortran equivalent of the plshade C routines.

* Menu:

* plcon0; Contour plot; identity mapping for fortran::
* plcon1; Contour plot; general 1-d mapping for fortran::
* plcon2; Contour plot; general 2-d mapping for fortran::
* plcont; Contour plot; fixed linear mapping for fortran::
* plvec0; Vector plot; identity mapping for fortran::
* plvec1; Vector plot; general 1-d mapping for fortran::
* plvec2; Vector plot; general 2-d mapping for fortran::
* plvect; Vector plot; fixed linear mapping for fortran::
* plmesh; Plot surface mesh for fortran::
* plot3d; Plot 3-d surface plot for fortran::
* plparseopts; parse arguments for fortran::
* plsesc; Set the escape character for text strings for fortran::


File: plplotdoc.info,  Node: plcon0; Contour plot; identity mapping for fortran,  Next: plcon1; Contour plot; general 1-d mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.1 plcon0: Contour plot, identity mapping for fortran
=======================================================

     plcon0 (z, nx, ny, kx, lx, ky, ly, clevel, nlevel);

   Draws a contour plot of the data in ``z'[`nx'][`ny']', using the
``nlevel'' contour levels specified by ``clevel''.  Only the region of
the array from ``kx'' to ``lx'' and from ``ky'' to ``ly'' is plotted
out. See *Note Contour and Shade Plots: Contour and Shade Plots. for
more information.

`z'  (`PLFLT **', input)
     Pointer to a vectored two-dimensional array containing data to be
     contoured.

`nx, ny'  (`PLINT', input)
     Physical dimensions of array ``z''.

`kx, lx'  (`PLINT', input)
     Range of `x' indices to consider.

`ky, ly'  (`PLINT', input)
     Range of `y' indices to consider.

`clevel'  (`PLFLT *', input)
     Pointer to array specifying levels at which to draw contours.

`nlevel'  (`PLINT', input)
     Number of contour levels to draw.

   NOTE: this function is intended for use from a Fortran caller only.
The C user should instead call `plcont' (*note plcont; Contour plot::)
using the built-in transformation function `pltr0' for the same
capability.


File: plplotdoc.info,  Node: plcon1; Contour plot; general 1-d mapping for fortran,  Next: plcon2; Contour plot; general 2-d mapping for fortran,  Prev: plcon0; Contour plot; identity mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.2 plcon1: Contour plot, general 1-d mapping for fortran
==========================================================

     plcon1 (z, nx, ny, kx, lx, ky, ly, clevel, nlevel, xg, yg);

   Draws a contour plot of the data in ``z'[`nx'][`ny']', using the
``nlevel'' contour levels specified by ``clevel''.  Only the region of
the array from ``kx'' to ``lx'' and from ``ky'' to ``ly'' is plotted
out. The arrays ``xg'' and ``yg'' are used to specify the
transformation between array indices and world coordinates. See *Note
Contour and Shade Plots: Contour and Shade Plots. for more information.

`z'  (`PLFLT **', input)
     Pointer to a vectored two-dimensional array containing data to be
     contoured.

`nx, ny'  (`PLINT', input)
     Physical dimensions of array ``z''.

`kx, lx'  (`PLINT', input)
     Range of `x' indices to consider.

`ky, ly'  (`PLINT', input)
     Range of `y' indices to consider.

`clevel'  (`PLFLT *', input)
     Pointer to array specifying levels at which to draw contours.

`nlevel'  (`PLINT', input)
     Number of contour levels to draw.

`xg, yg'  (`PLFLT *', input)
     Pointers to arrays which specify the transformation from array
     indices to world coordinates. These must be one-dimensional
     arrays, used for a transformation of the form: `tx' = `f(x)', `ty'
     = `f(y)'. Function values at locations between grid points are
     obtained via linear interpolation.

   NOTE: this function is intended for use from a Fortran caller only.
The C user should instead call `plcont' (*note plcont; Contour plot::)
using the built-in transformation function `pltr1' for the same
capability.


File: plplotdoc.info,  Node: plcon2; Contour plot; general 2-d mapping for fortran,  Next: plcont; Contour plot; fixed linear mapping for fortran,  Prev: plcon1; Contour plot; general 1-d mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.3 plcon2: Contour plot, general 2-d mapping for fortran
==========================================================

     plcon2 (z, nx, ny, kx, lx, ky, ly, clevel, nlevel, xg, yg);

   Draws a contour plot of the data in ``z'[`nx'][`ny']', using the
``nlevel'' contour levels specified by ``clevel''.  Only the region of
the array from ``kx'' to ``lx'' and from ``ky'' to ``ly'' is plotted
out. The arrays ``xg'' and ``yg'' are used to specify the
transformation between array indices and world coordinates. See *Note
Contour and Shade Plots: Contour and Shade Plots. for more information.

`z'  (`PLFLT **', input)
     Pointer to a vectored two-dimensional array containing data to be
     contoured.

`nx, ny'  (`PLINT', input)
     Physical dimensions of array ``z''.

`kx, lx' (`PLINT', input)
     Range of `x' indices to consider.

`ky, ly'  (`PLINT', input)
     Range of `y' indices to consider.

`clevel'  (`PLFLT *', input)
     Pointer to array specifying levels at which to draw contours.

`nlevel' (`PLINT', input)
     Number of contour levels to draw.

`xg, yg'  (`PLFLT *', input)
     Pointers to arrays which specify the transformation from array
     indices to world coordinates. These must be two-dimensional
     arrays, used for a transformation of the form: `tx' = `f(x, y)',
     `ty' = `f(x, y)'. Function values at locations between grid points
     are obtained via linear interpolation.

   NOTE: this function is intended for use from a Fortran caller only.
The C user should instead call `plcont' (*note plcont; Contour plot::)
using the built-in transformation function `pltr2' for the same
capability.


File: plplotdoc.info,  Node: plcont; Contour plot; fixed linear mapping for fortran,  Next: plvec0; Vector plot; identity mapping for fortran,  Prev: plcon2; Contour plot; general 2-d mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.4 plcont: Contour plot, fixed linear mapping for fortran
===========================================================

     plcont (z, nx, ny, kx, lx, ky, ly, clevel, nlevel);

   When called from Fortran, this routine has the same effect as when
invoked from C. The interpretation of all parameters (see `plcont'
(*note plcont; Contour plot::)) is also the same except there is no
transformation function supplied as the last parameter. Instead, a
6-element array specifying coefficients to use in the transformation is
supplied via the named common block `plplot' (see code). Since this
approach is somewhat inflexible, the user is recommended to call either
of `plcon0' (*note plcon0; Contour plot; identity mapping for
fortran::), `plcon1' (*note plcon1; Contour plot; general 1-d mapping
for fortran::), or `plcon2' (*note plcon2; Contour plot; general 2-d
mapping for fortran::) instead.


File: plplotdoc.info,  Node: plvec0; Vector plot; identity mapping for fortran,  Next: plvec1; Vector plot; general 1-d mapping for fortran,  Prev: plcont; Contour plot; fixed linear mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.5 plvec0: Vector plot, identity mapping for fortran
======================================================

     plvec0 (u, v, nx, ny, scale);

   Draws a vector plot of the data in `(`u'[`nx'][`ny'],
`v'[`nx'][`ny'])'.

`u, v'  (`PLFLT **', input)
     Pointer to a pair of vectored two-dimensional arrays containing
     the x and y components of the vector to be plotted.

`nx, ny'  (`PLINT', input)
     Physical dimensions of the arrays ``u'' and ``v''.

`scale'  (`PLFLT', input)
     Parameter to control the scaling factor of the vectors for
     plotting.  If ``scale' = 0' then the scaling factor is
     automatically calculated for the data.  If ``scale' < 0' then the
     scaling factor is automatically calculated for the data and then
     multiplied by `-`scale''.  If ``scale' > 0' then the scaling
     factor is set to ``scale''.

   NOTE: this function is intended for use from a Fortran caller only.
The C user should instead call `plvect' (*note plvect; Vector plot::)
using the built-in transformation function `pltr0' for the same
capability.


File: plplotdoc.info,  Node: plvec1; Vector plot; general 1-d mapping for fortran,  Next: plvec2; Vector plot; general 2-d mapping for fortran,  Prev: plvec0; Vector plot; identity mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.6 plvec1: Vector plot, general 1-d mapping for fortran
=========================================================

     plvec1 (u, v, nx, ny, scale, xg, yg);

   Draws a vector plot of the data in `(`u'[`nx'][`ny'],
`v'[`nx'][`ny'])'.

`u, v'  (`PLFLT **', input)
     Pointer to a pair of vectored two-dimensional arrays containing
     the x and y components of the vector to be plotted.

`nx, ny'  (`PLINT', input)
     Physical dimensions of the arrays ``u'' and ``v''.

`scale'  (`PLFLT', input)
     Parameter to control the scaling factor of the vectors for
     plotting.  If ``scale' = 0' then the scaling factor is
     automatically calculated for the data.  If ``scale' < 0' then the
     scaling factor is automatically calculated for the data and then
     multiplied by `-`scale''.  If ``scale' > 0' then the scaling
     factor is set to ``scale''.

`xg, yg'  (`PLFLT *', input)
     Pointers to arrays which specify the transformation from array
     indices to world coordinates. These must be one-dimensional
     arrays, used for a transformation of the form: `tx' = `f(x)', `ty'
     = `f(y)'. Function values at locations between grid points are
     obtained via linear interpolation.

   NOTE: this function is intended for use from a Fortran caller only.
The C user should instead call `plvect' (*note plvect; Vector plot::)
using the built-in transformation function `pltr1' for the same
capability.


File: plplotdoc.info,  Node: plvec2; Vector plot; general 2-d mapping for fortran,  Next: plvect; Vector plot; fixed linear mapping for fortran,  Prev: plvec1; Vector plot; general 1-d mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.7 plvec2: Vector plot, general 2-d mapping for fortran
=========================================================

     plvec2 (u, v, nx, ny, scale, xg, yg);

   Draws a vector plot of the data in `(`u'[`nx'][`ny'],
`v'[`nx'][`ny'])'.

`u, v'  (`PLFLT **', input)
     Pointer to a pair of vectored two-dimensional arrays containing
     the x and y components of the vector to be plotted.

`nx, ny'  (`PLINT', input)
     Physical dimensions of the arrays ``u'' and ``v''.

`scale'  (`PLFLT', input)
     Parameter to control the scaling factor of the vectors for
     plotting.  If ``scale' = 0' then the scaling factor is
     automatically calculated for the data.  If ``scale' < 0' then the
     scaling factor is automatically calculated for the data and then
     multiplied by `-`scale''.  If ``scale' > 0' then the scaling
     factor is set to ``scale''.

`xg, yg'  (`PLFLT *', input)
     Pointers to arrays which specify the transformation from array
     indices to world coordinates. These must be two-dimensional
     arrays, used for a transformation of the form: `tx' = `f(x, y)',
     `ty' = `f(x, y)'. Function values at locations between grid points
     are obtained via linear interpolation.

   NOTE: this function is intended for use from a Fortran caller only.
The C user should instead call `plvect' (*note plvect; Vector plot::)
using the built-in transformation function `pltr2' for the same
capability.


File: plplotdoc.info,  Node: plvect; Vector plot; fixed linear mapping for fortran,  Next: plmesh; Plot surface mesh for fortran,  Prev: plvec2; Vector plot; general 2-d mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.8 plvect: Vector plot, fixed linear mapping for fortran
==========================================================

     plvect (u, v, nx, ny, scale);

   When called from Fortran, this routine has the same effect as when
invoked from C. The interpretation of all parameters (see `plvect'
(*note plvect; Vector plot::)) is also the same except there is no
transformation function supplied as the last parameter. Instead, a
6-element array specifying coefficients to use in the transformation is
supplied via the named common block `plplot' (see code). Since this
approach is somewhat inflexible, the user is recommended to call either
of `plvec0' (*note plvec0; Vector plot; identity mapping for
fortran::), `plvec1' (*note plvec1; Vector plot; general 1-d mapping
for fortran::), or `plvec2' (*note plvec2; Vector plot; general 2-d
mapping for fortran::) instead.


File: plplotdoc.info,  Node: plmesh; Plot surface mesh for fortran,  Next: plot3d; Plot 3-d surface plot for fortran,  Prev: plvect; Vector plot; fixed linear mapping for fortran,  Up: The Specialized Fortran API for PLplot

18.9 plmesh: Plot surface mesh for fortran
==========================================

     plmesh (x, y, z, nx, ny, opt, mx);

   When called from Fortran, this routine has the same effect as when
invoked from C. The interpretation of all parameters (see `plmesh'
(*note plmesh; Plot surface mesh::)) is also the same except there is
an additional parameter given by:

`mx'  (`PLINT', input)
     Length of array in x direction, for plotting subarrays.


File: plplotdoc.info,  Node: plot3d; Plot 3-d surface plot for fortran,  Next: plparseopts; parse arguments for fortran,  Prev: plmesh; Plot surface mesh for fortran,  Up: The Specialized Fortran API for PLplot

18.10 plot3d: Plot 3-d surface plot for fortran
===============================================

     plot3d (x, y, z, nx, ny, opt, side, mx);

   When called from Fortran, this routine has the same effect as when
invoked from C. The interpretation of all parameters (see `plot3d'
(*note plot3d; Plot 3-d surface plot::)) is also the same except there
is an additional parameter given by:

`mx'  (`PLINT', input)
     Length of array in x direction, for plotting subarrays.


File: plplotdoc.info,  Node: plparseopts; parse arguments for fortran,  Next: plsesc; Set the escape character for text strings for fortran,  Prev: plot3d; Plot 3-d surface plot for fortran,  Up: The Specialized Fortran API for PLplot

18.11 plparseopts: parse arguments for fortran
==============================================

     plparseopts (mode);

   When called from Fortran, this routine has the same effect as when
invoked from C (see `plparseopts' (*note plparseopts; Parse
command-line arguments::)) except that the argument list just contains
the parsing mode and the fortran system routines `iargc' and `getarg'
are used internally to obtain the number of arguments and argument
values. (Note, during configuration, the user's fortran compiler is
checked to see whether it supports `iargc' and `getarg'. If it does
not, the fortran plparseopts simply writes a warning message and
returns.

`mode'  (`PLINT', input)
     Parsing mode; see `plparseopts' (*note plparseopts; Parse
     command-line arguments::) for details.


File: plplotdoc.info,  Node: plsesc; Set the escape character for text strings for fortran,  Prev: plparseopts; parse arguments for fortran,  Up: The Specialized Fortran API for PLplot

18.12 plsesc: Set the escape character for text strings for fortran
===================================================================

     plsesc (esc);

   Set the escape character for text strings. From Fortran it needs to
be the decimal ASCII value. Only selected characters are allowed to
prevent the user from shooting himself in the foot (For example, a \
isn't allowed since it conflicts with C's use of backslash as a
character escape). Here are the allowed escape characters and their
corresponding decimal ASCII values:

   * !, ASCII 33

   * #, ASCII 35

   * $, ASCII 36

   * %, ASCII 37

   * &, ASCII 38

   * *, ASCII 42

   * @, ASCII 64

   * ^, ASCII 94

   * ~, ASCII 126

`esc'  (`char', input)
     NEEDS DOCUMENTATION


File: plplotdoc.info,  Node: API compatibility definition,  Next: Obsolete/Deprecated API for PLplot,  Prev: The Specialized Fortran API for PLplot,  Up: Top

19 API compatibility definition
*******************************

This chapter presents the formal definition of what is considered to be
in the PLplot library API. It is assumed that major new releases of
PLplot will have substantial backwards incompatible changes in the API,
but the PLplot developers commit to introducing as few as possible of
such incompatibilities between minor releases such that stability
across those minor releases is practically guaranteed. In all cases
where backwards incompatible changes have been introduced, then the
library soname will be changed (for operating systems such as Linux
that support versioned shared libraries).

   The information in this chapter regards version 5.5.3 of PLplot,
released on 2005-05-13.

* Menu:

* What is in the API?::
* Regression test for backwards compatibility::


File: plplotdoc.info,  Node: What is in the API?,  Next: Regression test for backwards compatibility,  Up: API compatibility definition

19.1 What is in the API?
========================

The formal definition of the PLplot C API is everything that is defined
in the include file `plplot.h'. This includes all the function
prototypes, the defined structures and the semantics of the constants.
The list of symbols currently exported by the shared library
`libplplot.h' that are declared in `plplot.h' is the following:

     plAlloc2dGrid          plgdidev               plscmap1n
     plClearOpts            plgdiori               plscol0
     plFindCommand          plgdiplt               plscolbg
     plFindName             plgesc                 plscolor
     plFree2dGrid           plgfam                 plscompression
     plGetCursor            plgfci                 plsdev
     plGetFlt               plgfile                plsdidev
     plGetInt               plgfnam                plsdimap
     plGetName              plglevel               plsdiori
     plHLS_RGB              plgpage                plsdiplt
     plMergeOpts            plgra                  plsdiplz
     plMinMax2dGrid         plgriddata             plseopH
     plOptUsage             plgspa                 plsesc
     plParseOpts            plgstrm                plsetopt
     plRGB_HLS              plgver                 plsexit
     plResetOpts            plgvpd                 plsfam
     plSetOpt               plgvpw                 plsfci
     plSetUsage             plgxax                 plsfile
     plTranslateCursor      plgyax                 plsfnam
     pl_cmd                 plgzax                 plshade
     pl_setcontlabelformat  plhist                 plshade1
     pl_setcontlabelparam   plhls                  plshades
     pladv                  plhlsrgb               plsmaj
     plarrows               plimage                plsmem
     plaxes                 plinit                 plsmin
     plbin                  pljoin                 plsori
     plbop                  pllab                  plspage
     plbox                  pllightsource          plspause
     plbox3                 plline                 plsstrm
     plcalc_world           plline3                plssub
     plclear                pllsty                 plssym
     plcol0                 plmap                  plstar
     plcol1                 plmeridians            plstart
     plcont                 plmesh                 plstr
     plcpstrm               plmeshc                plstripa
     pldid2pc               plmkstrm               plstripc
     pldip2dc               plmtex                 plstripd
     plend                  plot3d                 plstyl
     plend1                 plot3dc                plsurf3d
     plenv                  plot3dcl               plsurf3dl
     plenv0                 plparseopts            plsvect
     pleop                  plpat                  plsvpa
     plerrx                 plpoin                 plsxax
     plerry                 plpoin3                plsxwin
     plf2eval               plpoly3                plsyax
     plf2eval2              plprec                 plsym
     plf2evalr              plpsty                 plszax
     plfamadv               plptex                 pltext
     plfcont                plreplot               pltr0
     plfill                 plrgb                  pltr1
     plfill3                plrgb1                 pltr2
     plflush                plrgbhls               pltr2p
     plfont                 plsButtonEH            plvasp
     plfontld               plsError               plvect
     plfshade               plsKeyEH               plvpas
     plgDevs                plsabort               plvpor
     plgFileDevs            plsbopH                plvsta
     plgchr                 plschr                 plw3d
     plgcol0                plscmap0               plwid
     plgcolbg               plscmap0n              plwind
     plgcompression         plscmap1               plxormod
     plgdev                 plscmap1l

   Another important aspect of compatibility regard the Application
Binary Interface (ABI). Backwards compatibility can be broken by
changes in the C structures made public through `plplot.h'. Currently,
they are:

     typedef struct {
         char *opt;
         int  (*handler)	(char *, char *, void *);
         void *client_data;
         void *var;
         long mode;
         char *syntax;
         char *desc;
     } PLOptionTable;

     typedef struct {
         int type;			/* of event (CURRENTLY UNUSED) */
         unsigned int state;		/* key or button mask */
         unsigned int keysym;	/* key selected */
         unsigned int button;	/* mouse button selected */
         PLINT subwindow;            /* subwindow (alias subpage, alias subplot) number */
         char string[PL_MAXKEY];	/* translated string */
         int pX, pY;			/* absolute device coordinates of pointer */
         PLFLT dX, dY;		/* relative device coordinates of pointer */
         PLFLT wX, wY;		/* world coordinates of pointer */
     } PLGraphicsIn;

     typedef struct {
         PLFLT dxmi, dxma, dymi, dyma;	/* min, max window rel dev coords */
         PLFLT wxmi, wxma, wymi, wyma;	/* min, max window world coords */
     } PLWindow;

     typedef struct {
         unsigned int x, y;			/* upper left hand corner */
         unsigned int width, height;		/* window dimensions */
     } PLDisplay;

     typedef struct {
         PLFLT *f;
         PLINT nx, ny, nz;
     } PLfGrid;

     typedef struct {
         PLFLT **f;
         PLINT nx, ny;
     } PLfGrid2;

     typedef struct {
         PLFLT *xg, *yg, *zg;
         PLINT nx, ny, nz;
     } PLcGrid;

     typedef struct {
         PLFLT **xg, **yg, **zg;
         PLINT nx, ny;
     } PLcGrid2;

     typedef struct {
         unsigned char r;		/* red */
         unsigned char g;		/* green */
         unsigned char b;		/* blue */
         char *name;
     } PLColor;

     typedef struct {
         PLFLT h;			/* hue */
         PLFLT l;			/* lightness */
         PLFLT s;			/* saturation */
         PLFLT p;			/* position */
         int rev;			/* if set, interpolate through h=0 */
     } PLControlPt;

     typedef struct {
         PLINT cmd;
         PLINT result;
     } PLBufferingCB;


File: plplotdoc.info,  Node: Regression test for backwards compatibility,  Prev: What is in the API?,  Up: API compatibility definition

19.2 Regression test for backwards compatibility
================================================

Since PLplot is developed by so many people, the task of checking for
backwards compatiblity of the library is very hard. As for the 5.3.1
release, we do not have any rigorous regression test for check whether
the library is really backwards compatible.

   However, here are some rules to be followed by the Release Manager
prior to releasing a new version of PLplot:

   * Check if there are any changes in `plplot.h'. If no prototype is
     changed, then the chances are high that no backwards
     compatibilities have been introduced. If new functions has been
     added, then the library soname will be kept, although the libtool
     soversion string in `configure.ac' must be changed from `x:y:z' to
     `(x+1):0:(z+1)'. See the libtool manual for details.

   * A necessary, but not sufficient test consists of the following:
     first, install the previous released version of PLplot in the
     system and compile all the examples `examples/c/x??c.'. After
     that, install the to-be-released version of PLplot and try to run
     the previously compiled examples. If they either link or run
     incorrectly, then backwards incompatibilities have been introduced
     and the soversion string must be upgraded from `x:y:z' to
     `(x+1):0:0'.


File: plplotdoc.info,  Node: Obsolete/Deprecated API for PLplot,  Next: Notes for each Operating System that We Support,  Prev: API compatibility definition,  Up: Top

20 Obsolete/Deprecated API for PLplot
*************************************

The purpose of this chapter is to provide minimal documentation for
obsolete/deprecated API that appears in our C library to provide
backwards compatibility until our next major release, PLplot-6, where
these functions will disappear. Do not use these functions, and if you
already use them in legacy PLplot applications, replace them by the
suggested equivalents so you won't be caught out by the next major
PLplot release.

* Menu:

* plclr; Eject current page::
* plcol; Set color::
* plhls; Set current color by HLS::
* plHLS_RGB; Convert HLS color to RGB::
* plpage; Begin a new page::
* plrgb; Set line color by red; green::
* plrgb1; Set line color by 8-bit RGB values::


File: plplotdoc.info,  Node: plclr; Eject current page,  Next: plcol; Set color,  Up: Obsolete/Deprecated API for PLplot

20.1 plclr: Eject current page
==============================

     plclr ();

   Deprecated. Use the new name, `pleop' (*note pleop; Eject current
page::), for this function instead.


File: plplotdoc.info,  Node: plcol; Set color,  Next: plhls; Set current color by HLS,  Prev: plclr; Eject current page,  Up: Obsolete/Deprecated API for PLplot

20.2 plcol: Set color
=====================

     plcol (color);

   Deprecated. Use the new name, `plcol0' (*note plcol0; Set color;
map0::), for this function instead.

`color'  (`PLINT', input)
     See `plcol0' (*note plcol0; Set color; map0::).


File: plplotdoc.info,  Node: plhls; Set current color by HLS,  Next: plHLS_RGB; Convert HLS color to RGB,  Prev: plcol; Set color,  Up: Obsolete/Deprecated API for PLplot

20.3 plhls: Set current color by HLS
====================================

     plhls (h, l, s);

   Set current color by hue, lightness, and saturation.  Convert hls
color coordinates to rgb, then call plrgb.  Do not use this. Only
retained for backward compatibility.  Use `plhlsrgb' (*note plhlsrgb;
Convert HLS color to RGB::) and `plscol0' (*note plscol0; Set a given
color from color map0 by 8 bit RGB value::) instead.

`h'  (`PLFLT', input)
     NEEDS DOCUMENTATION

`l'  (`PLFLT', input)
     NEEDS DOCUMENTATION

`s'  (`PLFLT', input)
     NEEDS DOCUMENTATION


File: plplotdoc.info,  Node: plHLS_RGB; Convert HLS color to RGB,  Next: plpage; Begin a new page,  Prev: plhls; Set current color by HLS,  Up: Obsolete/Deprecated API for PLplot

20.4 plHLS_RGB: Convert HLS color to RGB
========================================

     plHLS_RGB (h, l, s, p_r, p_g, p_b);

   Use `plhlsrgb' (*note plhlsrgb; Convert HLS color to RGB::) from the
common API instead of this deprecated C-only function.

`h'  (`PLFLT', input)
     Hue, in degrees on the colour cone (0.0-360.0)

`l'  (`PLFLT', input)
     Lightness, expressed as a fraction of the axis of the colour cone
     (0.0-1.0)

`s'  (`PLFLT', input)
     Saturation, expressed as a fraction of the radius of the colour
     cone (0.0-1.0)

`p_r'  (`PLFLT *', output)
     Pointer to red intensity (0.0-1.0) of the colour

`p_g'  (`PLFLT *', output)
     Pointer to green intensity (0.0-1.0) of the colour

`p_b'  (`PLFLT *', output)
     Pointer to blue intensity (0.0-1.0) of the colour


File: plplotdoc.info,  Node: plpage; Begin a new page,  Next: plrgb; Set line color by red; green,  Prev: plHLS_RGB; Convert HLS color to RGB,  Up: Obsolete/Deprecated API for PLplot

20.5 plpage: Begin a new page
=============================

     plpage ();

   Deprecated. Use the new name, `plbop' (*note plbop; Begin a new
page::), for this function instead.


File: plplotdoc.info,  Node: plrgb; Set line color by red; green,  Next: plrgb1; Set line color by 8-bit RGB values,  Prev: plpage; Begin a new page,  Up: Obsolete/Deprecated API for PLplot

20.6 plrgb: Set line color by red, green
========================================

     plrgb (r, g, b);

   Set line color by red, green, blue from 0. to 1. Do not use this.
Only retained for backward compatibility. Use the function `plscol0'
(*note plscol0; Set a given color from color map0 by 8 bit RGB value::)
instead.

`r'  (`PLFLT', input)
     NEEDS DOCUMENTATION

`g'  (`PLFLT', input)
     NEEDS DOCUMENTATION

`b'  (`PLFLT', input)
     NEEDS DOCUMENTATION


File: plplotdoc.info,  Node: plrgb1; Set line color by 8-bit RGB values,  Prev: plrgb; Set line color by red; green,  Up: Obsolete/Deprecated API for PLplot

20.7 plrgb1: Set line color by 8-bit RGB values
===============================================

     plrgb1 (r, g, b);

   Set line color by 8-bit RGB values. Do not use this.  Only retained
for backward compatibility. Use the function `plscol0' (*note plscol0;
Set a given color from color map0 by 8 bit RGB value::) instead.

`r'  (`PLINT', input)
     NEEDS DOCUMENTATION

`g'  (`PLINT', input)
     NEEDS DOCUMENTATION

`b'  (`PLINT', input)
     NEEDS DOCUMENTATION


File: plplotdoc.info,  Node: Notes for each Operating System that We Support,  Prev: Obsolete/Deprecated API for PLplot,  Up: Top

21 Notes for each Operating System that We Support
**************************************************

The purpose of this Chapter is to present notes for each operating
system that we support. Although we have some support for a number of
operating systems, we only have notes for Linux/Unix systems at this
point.  NEEDS DOCUMENTATION

* Menu:

* Linux/Unix Notes::


File: plplotdoc.info,  Node: Linux/Unix Notes,  Up: Notes for each Operating System that We Support

21.1 Linux/Unix Notes
=====================

* Menu:

* Linux/Unix Configure; Build; and Installation::
* Linux/Unix Building of C Programmes that Use the Installed PLplot Libraries::


File: plplotdoc.info,  Node: Linux/Unix Configure; Build; and Installation,  Next: Linux/Unix Building of C Programmes that Use the Installed PLplot Libraries,  Up: Linux/Unix Notes

21.1.1 Linux/Unix Configure, Build, and Installation
----------------------------------------------------

Here is the short story:


     ./configure
     make
     make install

   The longer story is there are a lot of possible configure options.
Two of the more important configure options are `--prefix' and
`--with-double'.  Here is the complete list of configuration options:


     ./configure --help
     No defaults file found, performing full configure.
     Usage: configure [options] [host]
     Options: [defaults in brackets after descriptions]
     Configuration:
       --cache-file=FILE       cache test results in FILE
       --help                  print this message
       --no-create             do not create output files
       --quiet, --silent       do not print `checking...' messages
       --version               print the version of autoconf that created configure
     Directory and file names:
       --prefix=PREFIX         install architecture-independent files in PREFIX
                               [/usr/local/plplot]
       --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                               [same as prefix]
       --bindir=DIR            user executables in DIR [EPREFIX/bin]
       --sbindir=DIR           system admin executables in DIR [EPREFIX/sbin]
       --libexecdir=DIR        program executables in DIR [EPREFIX/libexec]
       --datadir=DIR           read-only architecture-independent data in DIR
                               [PREFIX/share]
       --sysconfdir=DIR        read-only single-machine data in DIR [PREFIX/etc]
       --sharedstatedir=DIR    modifiable architecture-independent data in DIR
                               [PREFIX/com]
       --localstatedir=DIR     modifiable single-machine data in DIR [PREFIX/var]
       --libdir=DIR            object code libraries in DIR [EPREFIX/lib]
       --includedir=DIR        C header files in DIR [PREFIX/include]
       --oldincludedir=DIR     C header files for non-gcc in DIR [/usr/include]
       --infodir=DIR           info documentation in DIR [PREFIX/info]
       --mandir=DIR            man documentation in DIR [PREFIX/man]
       --srcdir=DIR            find the sources in DIR [configure dir or ..]
       --program-prefix=PREFIX prepend PREFIX to installed program names
       --program-suffix=SUFFIX append SUFFIX to installed program names
       --program-transform-name=PROGRAM
                               run sed PROGRAM on installed program names
     Host type:
       --build=BUILD           configure for building on BUILD [BUILD=HOST]
       --host=HOST             configure for HOST [guessed]
       --target=TARGET         configure for TARGET [TARGET=HOST]
     Features and packages:
       --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
       --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
       --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
       --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
       --x-includes=DIR        X include files are in DIR
       --x-libraries=DIR       X library files are in DIR
     --enable and --with options recognized:
       --with-defaults         source defaults file at startup (yes)
       --with-debug            compile with debugging (no)
       --with-opt              compile with optimization (yes)
       --with-double           use double precision floats (no)
       --with-profile          turn on profiling option (no)
       --with-shlib            build shared libraries (yes)
       --with-gcc              use gcc to compile C and C++ code (yes)
       --with-warn             enable all compilation warnings (no)
       --with-dbmalloc         link with libdbmalloc (no)
       --with-pkgdir=DIR       locate libraries and includes under DIR
       --with-fseek            use fseek/ftell rather than fsetpos/fgetpos (no)
       --with-rpath            link libraries with -rpath option (yes)
       --enable-f77            compile Fortran-77 interface code (yes)
       --enable-cxx            compile C++ interface code (yes)
       --enable-python         compile python interface code (yes)
       --enable-tcl            compile Tcl interface code (yes)
       --enable-itcl           enable incr Tcl interface code (yes)
       --with-x                use the X Window System
       --with-gtk-prefix=PFX   Prefix where GTK is installed (optional)
       --with-gtk-exec-prefix=PFX Exec prefix where GTK is installed (optional)
       --disable-gtktest       Do not try to compile and run a test GTK program
       --with-gnome-includes   Specify location of GNOME headers
       --with-gnome-libs       Specify location of GNOME libs
       --with-gnome            Specify prefix for GNOME files
       --enable-plmeta         enable plmeta device driver ()
       --enable-null           enable null device driver ()
       --enable-xterm          enable xterm device driver ()
       --enable-tek4010        enable tek4010 device driver ()
       --enable-tek4107        enable tek4107 device driver ()
       --enable-mskermit       enable mskermit device driver ()
       --enable-conex          enable conex device driver ()
       --enable-linuxvga       enable linuxvga device driver ()
       --enable-vlt            enable vlt device driver ()
       --enable-versaterm      enable versaterm device driver ()
       --enable-dg300          enable dg300 device driver ()
       --enable-ps             enable ps device driver ()
       --enable-xfig           enable xfig device driver ()
       --enable-ljii           enable ljii device driver ()
       --enable-hp7470         enable hp7470 device driver ()
       --enable-hp7580         enable hp7580 device driver ()
       --enable-lj_hpgl        enable lj_hpgl device driver ()
       --enable-imp            enable imp device driver ()
       --enable-xwin           enable xwin device driver (yes)
       --enable-tk             enable tk device driver (yes)
       --enable-pbm            enable pbm device driver ()
       --enable-gnome          enable gnome device driver (no)

   The configure script looks for default configuration options first
in `./cf_plplot.in'.  If that file is not found, the script then looks
in `$HOME/config/cf_plplot.in'.  Finally, if neither file is found or
if the found file does not have a particular default option, then the
script uses the above defaults. Here is one example of a default
configuration file. Adapt this for your needs or else use the
command-line parameters for the configuration file.


     # --*-sh-*---------------------------------------------------------------
     #
     # PLplot configure script default variables.
     #
     #
     # Note: the internal representation of the --with-<option> and
     # --enable-<option> command line switches actually uses an underscore,
     # e.g. with_<option> and enable_<option>.  Don't forget!
     #
     # -----------------------------------------------------------------------

     # Method to turn off Fortran and C++ bindings.

     enable_cxx="no"
     enable_f77="no"

     # Devices are selected by --enable or --disable on the command line, but
     # only shell variables of the form enable_<option> are recognized here.

     enable_tek4010="no"
     enable_mskermit="no"
     enable_conex="no"
     enable_vlt="no"
     enable_versaterm="no"
     enable_xfig="no"

     enable_dg300="no"
     enable_imp="no"
     enable_tek4107="no"
     enable_hp7470="no"
     enable_hp7580="no"


File: plplotdoc.info,  Node: Linux/Unix Building of C Programmes that Use the Installed PLplot Libraries,  Prev: Linux/Unix Configure; Build; and Installation,  Up: Linux/Unix Notes

21.1.2 Linux/Unix Building of C Programmes that Use the   Installed PLplot Libraries
------------------------------------------------------------------------------------

This is incomplete. NEEDS DOCUMENTATION.  `$prefix/bin/plplot-config'
is a useful tool for helping with building of C programmes that use the
PLplot libraries.


     ./plplot-config --help
     Usage: plplot-config [OPTIONS]
     Options:
             [--prefix[=DIR]]
     	[--version]
     	[--libs]
     	[--cflags]
     	[--with-c++]
     	[--help]

For example, the `--cflags' parameter displays the flags for compiling,
and the `--libs' parameter displays the flags for linking your
application. The displayed flags are exactly consistent with the
configuration specified when PLplot was last built and installed.


