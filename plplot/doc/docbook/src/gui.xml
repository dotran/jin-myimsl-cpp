<!--
    gui.xml: "Embedding Plots in Graphical User Interfaces" chapter
        
    Copyright (C) 2005 Thomas J. Duck

    Redistribution and use in source (XML DocBook) and "compiled" forms
    (HTML, PDF, PostScript, DVI, TeXinfo and so forth) with or without
    modification, are permitted provided that the following conditions are
    met:

       1. Redistributions of source code (XML DocBook) must retain the
          above copyright notice, this list of conditions and the following
          disclaimer as the first lines of this file unmodified.

       2. Redistributions in compiled form (transformed to other DTDs,
          converted to HTML, PDF, PostScript, and other formats) must
          reproduce the above copyright notice, this list of conditions and
          the following disclaimer in the documentation and/or other
          materials provided with the distribution.

    Important: THIS DOCUMENTATION IS PROVIDED BY THE PLPLOT PROJECT "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PLPLOT PROJECT BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
    OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<chapter id="gui">
<title>Embedding Plots in Graphical User Interfaces</title>

<para>
This chapter describes how to embed plots in graphical user interfaces.
</para>


<!-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->
<!-- PLPLOTCANVAS -->

<sect1 id="plplotcanvas">
  <title>The PlplotCanvas Widget for Gnome/GTK Applications</title> 

  <para>
    Plots can be embedded into Gnome/GTK applications by using the
    PlplotCanvas widget.  Information on the GTK toolkit is provided
    at http://www.gtk.org/.  PlplotCanvas is a subclass of the GnomeCanvas
    (see http://developer.gnome.org/doc/API/2.0/libgnomecanvas/index.html), 
    and so includes all of its functionality.  The specialized C API for 
    PlplotCanvas is described in
    <xref linkend="plplotcanvas-api" />, and bindings to other languages
    are described in *** NEEDS DOCUMENTATION ***.
  </para>


  <!-- PlplotCanvas  Basics -->

  <sect2 id="plplotcanvas-basics">
    <title>PlplotCanvas Basics</title>

    <para>
      The method declarations and data structures are defined in 
      <filename>plplotcanvas.h</filename>.  Programs using the PlplotCanvas
      widget must be linked against the 
      <filename>libplplotgnome2d</filename> library 
      rather than <filename>libplplotd</filename>.  This is most easily 
      accomplished using pkg-config; i.e.,

      <programlisting>
        gcc plplotcanvas_demo.c -o plplotcanvas_demo `pkg-config --cflags --libs plplotd-gnome2`
      </programlisting>

      You may need to remind pkg-config where to look for the 
      <filename>plplotd-gnome2.pc</filename> file installed by PLplot; e.g.,

      <programlisting>
        gcc plplotcanvas_demo.c -o plplotcanvas_demo `PKG_CONFIG_PATH=/usr/local/lib/pkgconfig pkg-config --cflags --libs plplotd-gnome2`
      </programlisting>
    </para>

    <para>
      A specialized API is provided for PlplotCanvas and is described in
      <xref linkend="plplotcanvas-api" />.  The API provides methods
      to create and manipulate PlplotCanvas widgets, in addition to
      object-oriented analogues for each of the PLplot functions.
    </para>

    <para>
      Example programs are provided that demonstrate the use of the 
      PlplotCanvas widget in <xref linkend="plplotcanvas-examples" />.
    </para>

  </sect2>


  <!-- ================================================================== -->

  <sect2 id="plplotcanvas-api">
    <title>PlplotCanvas API</title>

    <para>
      The PlplotCanvas methods are as follows.  Because PlplotCanvas is a
      GTK widget, GLib types (gint, gdouble, gboolean, etc) are sometimes 
      used rather than PLplot types (PLINT, PLFLT, etc).  See 
      http://developer.gnome.org/doc/API/2.0/glib/index.html for more 
      information on GLib and GLib types.
    </para>

    <!-- plplot_canvas_new -->

    <sect3 id="plplot_canvas_new">

      <title>
        <function>plplot_canvas_new</function>: Creates a new PlplotCanvas.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>
            PlplotCanvas* plplot_canvas_new
          </function></funcdef>
          <paramdef><parameter>void</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        Returns a pointer to a new PlplotCanvas widget.  Methods that
	apply to a PlplotCanvas are given next.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>void</parameter> 
          </term>
          <listitem><para>
            There are no arguments for this method.
          </para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>


    <!-- plplot_canvas_plfunc -->

    <sect3 id="plplot_canvas_plfunc">
      <title>
        <function>plplot_canvas_plfunc</function>: PLplot function analogues.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>void plplot_canvas_plfunc</function></funcdef>
          <paramdef><parameter>canvas</parameter></paramdef>
          <paramdef><parameter>...</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        The PLplot functions have analogue methods named like
	<function>plplot_canvas_plfunc</function>.  For example, the 
        PLplot function &plline; maps to 
        <function>plplot_canvas_plline</function>.  The 
        <function>plplot_canvas_plfunc</function> methods
	should be used rather than the standard PLplot API when the
	PlplotCanvas is used.
      </para>

      <para>
        Lines drawn to the canvas are not shown until the page is
        advanced using <function>plplot_canvas_pladv</function>.  The 
        plot will remain on the canvas until the next page advance.
      </para>

      <para>
        The PLplot &plinit; and &plgstrm; functions are not used with 
        PlplotCanvas because the <function>plplot_canvas_new</function>
        function does the necessary initialization and returns an 
        object with a unique stream number.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>canvas</parameter> 
            (<literal>PlplotCanvas*</literal>, input)
          </term>
          <listitem><para>The canvas on which to operate.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <parameter>...</parameter> 
          </term>
          <listitem><para>
            The list of arguments from the PLplot function analogue.  The
	    same types used in the PLplot function are used here.
          </para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>


    <!-- plplot_canvas_dispose -->

    <sect3 id="plplot_canvas_dispose">
      <title>
        <function>plplot_canvas_dispose</function>: Disposes the canvas.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>void plplot_canvas_dispose</function></funcdef>
          <paramdef><parameter>canvas</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        Disposes the Canvas.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>canvas</parameter> 
            (<literal>PlplotCanvas*</literal>, input)
          </term>
          <listitem><para>The canvas to dispose.</para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>


    <!-- plplotcanvas_canvas_set_size -->

    <sect3 id ="plplot_canvas_set_size">
      <title>
        <function>plplot_canvas_set_size</function>: Sets the canvas size.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>
            void plplot_canvas_set_size
          </function></funcdef>
          <paramdef><parameter>canvas</parameter></paramdef>
          <paramdef><parameter>width</parameter></paramdef>
          <paramdef><parameter>height</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        Sets the PlplotCanvas widget width and height.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>canvas</parameter> 
            (<literal>PlplotCanvas*</literal>, input)
          </term>
          <listitem><para>The PlplotCanvas to size.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <parameter>width</parameter> (<literal>gint</literal>, input)
          </term>
          <listitem><para>The width, in pixels.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <parameter>height</parameter> (<literal>gint</literal>, input)
          </term>
          <listitem><para>The height, in pixels.</para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>


    <!-- plplot_canvas_use_text -->

    <sect3 id="plplot_canvas_use_text">
      <title>
        <function>plplot_canvas_use_text</function>: Sets text handling.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>void plplot_canvas_use_text</function></funcdef>
          <paramdef><parameter>canvas</parameter></paramdef>
          <paramdef><parameter>use_text</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        Sets whether TrueType text or Hershey fonts are used by the
	PlplotCanvas widget.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>canvas</parameter> 
            (<literal>PlplotCanvas*</literal>, input)
          </term>
          <listitem><para>The PlplotCanvas to set.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <parameter>use_text</parameter> 
            (<literal>gboolean</literal>, input)
          </term>
          <listitem><para>
            TRUE for TrueType fonts (default), FALSE for Hershey fonts.
          </para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>


    <!-- plplot_canvas_use_pixmap -->

    <sect3 id="plplot_canvas_use_pixmap">
      <title>
        <function>plplot_canvas_use_pixmap</function>: Sets pixmap usage.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>void plplot_canvas_use_pixmap</function></funcdef>
          <paramdef><parameter>canvas</parameter></paramdef>
          <paramdef><parameter>use_pixmap</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        Sets whether lines and shades are drawn to a pixmap,
        or instead as vector graphics.
      </para>

      <para>
        Lines and shade drawn to the pixmap are not anti-aliased, and so may
        appear pixelated.  Vector graphics are fully anti-aliased, but are
        rendered at a slower speed.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>canvas</parameter> 
            (<literal>PlplotCanvas*</literal>, input)
          </term>
          <listitem><para>The PlplotCanvas to set.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <parameter>use_pixmap</parameter> 
            (<literal>gboolean</literal>, input)
          </term>
          <listitem><para>
            TRUE to use pixmap (default), FALSE for vector graphics instead.
          </para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>


    <!-- plplot_canvas_use_persistence -->

    <sect3 id="plplot_canvas_use_persistence">
      <title>
        <function>plplot_canvas_use_persistence</function>: Sets persistence
        of subsequent drawing operations.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>
            void plplot_canvas_use_persistence
          </function></funcdef>
          <paramdef><parameter>canvas</parameter></paramdef>
          <paramdef><parameter>use_persistence</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        Sets whether the subsequent drawing commands are persistent,
	or refreshed when the PLplot page is advanced.  This feature
	is useful for plot animations, because the axes can be persistent
	rather than redrawn for each frame.
      </para>

      <para>
        Note that lines that are persistent are always anti-aliased and
        drawn at the front.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>canvas</parameter> 
            (<literal>PlplotCanvas*</literal>, input)
          </term>
          <listitem><para>The PlplotCanvas to set.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <parameter>use_persistence</parameter> 
            (<literal>gboolean</literal>, input)
          </term>
          <listitem><para>
            TRUE for persistence, FALSE for erasing at new page (default).
          </para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>


    <!-- plplot_canvas_get_stream_number -->

    <sect3 id="plplot_canvas_get_stream_number">
      <title>
        <function>plplot_canvas_get_stream_number</function>: Retrieves the
	PLplot stream number.
      </title>

      <para>
        <funcsynopsis><funcprototype>
          <funcdef><function>
            PLINT plplot_canvas_get_stream_number
          </function></funcdef>
          <paramdef><parameter>canvas</parameter></paramdef>
        </funcprototype></funcsynopsis>
      </para>

      <para>
        Returns the stream number for the given Canvas.  Although the 
	concept of streams that exists in the standard PLplot API is not
	used here, the stream number provides a unique ID number for
	the given PlplotCanvas widget.
      </para>

      <variablelist>
        <varlistentry>
          <term>
            <parameter>canvas</parameter>
            (<literal>PlplotCanvas*</literal>, input)
          </term>
          <listitem><para>
            The canvas to retrieve the stream number from.
          </para></listitem>
        </varlistentry>
      </variablelist>

    </sect3>

  </sect2>



  <!-- ================================================================== -->

  <sect2 id="plplotcanvas-examples">
    <title>PlplotCanvas Examples</title> 

    <para>

      Two example programs are provided that demonstrate the use of the
      PlplotCanvas widget.  They are:

      <itemizedlist>
        <listitem><para>
          plplotcanvas_demo: Demonstrates the basic usage of the 
          PlplotCanvas to embed a plot in a Gnome application.
        </para></listitem>
        <listitem><para>
          plplotcanvas_animation: Demonstrates advanced multi-threaded 
          dual-stream usage of the PlplotCanvas.
        </para></listitem>
      </itemizedlist>
    </para>

    <para>
      The code from plplotcanvas_demo.c is given below, and is explained
      in what follows.
    </para>


<programlisting>

#include &lt;plplotcanvas.h&gt;
#include &lt;gtk/gtk.h&gt;

/* The width and height of the plplot canvas widget */
#define WIDTH 1000 /* 500 */
#define HEIGHT 600 /* 300 */

/* Delete event callback */
gint delete_event( GtkWidget *widget,GdkEvent *event,gpointer data ) {
  return FALSE;
}

/* Destroy event calback */
void destroy(GtkWidget *widget,gpointer data) {
  gtk_main_quit ();
}


int main(int argc,char *argv[] )
{

  PlplotCanvas* canvas;
  GtkWidget *window;

  /* Parse the options */
  plparseopts(&amp;argc, argv, PL_PARSE_FULL);

  /* The data to plot */
  double x[11] = {0,1,2,3,4,5,6,7,8,9,10};
  double y[11] = {0,0.1,0.4,0.9,1.6,2.6,3.6,4.9,6.4,8.1,10};

  /* Initialize gtk and the glib type system */
  gtk_init(&amp;argc, &amp;argv);
  g_type_init();

  /* Create the canvas and set its size; during the creation process,
   * the gcw driver is loaded into plplot, and plinit() is invoked.
   */
  canvas=plplot_canvas_new(TRUE);
  plplot_canvas_set_size(canvas,WIDTH,HEIGHT);

  /* Create a new window and stuff the canvas into it */
  window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
  gtk_container_set_border_width(GTK_CONTAINER(window),10);
  gtk_container_add(GTK_CONTAINER(window),GTK_WIDGET(canvas));

  /* Connect the signal handlers to the window decorations */
  g_signal_connect(G_OBJECT(window),"delete_event",
		   G_CALLBACK(delete_event),NULL);
  g_signal_connect(G_OBJECT(window),"destroy",G_CALLBACK(destroy),NULL);

  /* Display everything */
  gtk_widget_show_all(window);

  /* Draw on the canvas with Plplot */
  plplot_canvas_pladv(canvas,0); /* Advance to first page */
  plplot_canvas_plcol0(canvas,15); /* Set color to black */
  plplot_canvas_plwid(canvas,2); /* Set the pen width */
  plplot_canvas_plvsta(canvas); /* Set the viewport */
  plplot_canvas_plwind(canvas,0.,10.,0.,10.); /* Set the window */
  plplot_canvas_plbox(canvas,"bcnst",0.,0,"bcnstv",0.,0); /* Set the box */
  plplot_canvas_pllab(canvas,"x-axis","y-axis","A Simple Plot"); /* Draw some labels */

  /* Draw the line */
  plplot_canvas_plcol0(canvas,1); /* Set the pen color */
  plplot_canvas_plline(canvas,11,x,y);

  /* Advancing the page finalizes this plot */
  plplot_canvas_pladv(canvas,0);

  /* Start the gtk main loop */
  gtk_main();
}
</programlisting>


    <para>
      So, what's going on here?  After the preliminaries, the GTK and the 
      GLib type system are initialized by calls to 
      <function>gtk_init</function> and <function>g_type_init</function>.  
      A PlplotCanvas is created using 
      <function>plplot_canvas_new</function>, and it's size is set using 
      <function>plplot_canvas_set_size</function>.  
    </para>

    <para>
      Next, a window is created (<function>gtk_window_new</function>), 
      the border is set (<function>gtk_set_border_width</function>), 
      and the canvas is stuffed into the window 
      (<function>gtk_container_add</function>).  
    </para>

    <para>
      Callback functions are installed using 
      <function>g_signal_connect</function> so that the window 
      decorations respond. The window is set to display everything using
      <function>gtk_widget_show_all</function>.
    </para>

    <para>
      Now come the PLplot analogue commands.  First, the page using is
      advanced using <function>plplot_canvas_pladv</function>.  The pen 
      color and width are set with <function>plplot_canvas_plcol0</function> 
      and <function>plplot_canvas_plwid</function>,respectively.  The PLplot
      viewport, window, box and labels are created using 
      <function>plplot_canvas_plvpor</function>, 
      <function>plplot_canvas_plwind</function>, 
      <function>plplot_canvas_plbox</function> and 
      <function>plplot_canvas_pllab</function>, respectively.  A line is 
      drawn on the canvas using <function>plplot_canvas_plline</function>, 
      the page is advanced with <function>plplot_canvas_pladv</function>.
    </para>

    <para>
      Finally, the GTK main loop is entered using 
      <function>gtk_main</function>, where it resides until the program
      is exited.
    </para>

  </sect2>

</sect1>


<!-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->


</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document: ("plplotdoc.xml" "book" "chapter" "")
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:nil
End:
-->
