5-1-91
Geoffrey Furnish

This directory contains files for building PLPLOT on DOS.  Unfortunately, 
as I start this project, I do not have a decent make that works on DOS, and
won't be able to get one till July.  So, I have created a major league batch
file controler, named plmake.bat.

Just run plmake.bat with no options, and it will tell you a little about 
itself.

Basically, the steps for building PLPLOT on DOS are just the same as for
any other platform, but the lack of a makefile adds some unncessary
complexity to the process.

Copy over the files from their source directories to the tmp directory.
	plmake mainlinks
	plmake stublinks
	
Build the libraries with:
	plmake mainlib
	plmake stublib

Build the metafile rendering utility with:
	plmake render

To build the fonts, go into the fonts directory and compile the files
and run stndfont and xtndfont.	Note that you will need to edit plfontld.c
to get it to look in the place where you will want to keep the fonts.

You can also build the example programs with:
	plmake cdemos
	plmake fdemos
	
Finally, plmake.bat contains other options which I installed to help me
in the development of the DOS software.  You can look at this and use it
for further development of things like the dosvga driver, or the metafile
writer, or you can install similar features for dealing with other things
you would like to enhance.

Note:  I used the Microsoft QuickC compiler for this port, so dosvga makes
calls to MS library functions, and uses some MS language extensions.  If you
have some other compiler, you may need to rework the dosvga driver to match
better with your compiler's library.

Also Note:  Since I always prefer to use OS/2 over DOS, you will find all 
the code for the DOS version in the OS/2 directory.  This is possible because
high level language programming is virtually identical on DOS and OS/2.
Moreover, since OS/2 provides virtual memory, multitasking and process 
protection, it is a greatly superior development environment, compared to
DOS.

An example of why I feel this way can be seen when you run the example
programs.  If you use /Zi (to include source info for debugging with MS
Codeview), you will observe that x13c does not produce fully formed cross
hatching.  This is because it runs out of memory, I believe.  You can however
tell x13c to direct output to the metafile, and then it will correctly form
the entire image.  (You view it with plrender).

For the interested:  My idea of the best way to use PLPLOT on PC systems
is the following.
	For small programs, go ahead and use DOS, if that's what you
	prefer.  But be prepared for major league difficulties with 
	memory restrictions.  You will probably need to turn off debugging
	info in order to do anything serious with PLPLOT.  That might be
	acceptable if you're not working on developments to PLPLOT itself.

	For "real work", I much prefer to use OS/2.  Since I have not yet
	written a PM driver, I direct the output to a metafile, and then
	switch to the DOS box to run the plrender utility.  For the kinds
	of problems I work on which usually involve long, batch-type,
	calculations, this seems to work well, and provides the ability to
	let the computation run in the background without losing the ability
	to see/review the plots at will.  It's not interactive, but for the
	sorts of things I use PLPLOT for, this is actually preferable.
