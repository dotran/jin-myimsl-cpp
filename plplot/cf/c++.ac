dnl cf/c++.ac for PLplot  -*- autoconf -*-
dnl
dnl C++ binding
dnl
dnl Copyright (C) 1994, 2004  Maurice LeBrun
dnl Copyright (C) 2002, 2003, 2004  Rafael Laboissiere
dnl Copyright (C) 2002, 2003, 2004  Alan W. Irwin
dnl Copyright (C) 2003, 2004  Joao Cardoso
dnl Copyright (C) 2004 Andrew Ross
dnl
dnl This file is part of PLplot.
dnl
dnl PLplot is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU Library General Public License as published
dnl by the Free Software Foundation; version 2 of the License.
dnl
dnl PLplot is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU Library General Public License for more details.
dnl
dnl You should have received a copy of the GNU Library General Public License
dnl along with the file PLplot; if not, write to the Free Software
dnl Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

PL_ARG_ENABLE(cxx, [compile C++ interface code], yes)

PL_ARG_WITH(debug, [Adjust debug compilation flags for KAI C++], no)

if test "$enable_cxx" = yes; then

    # If KAI C++ (Kuck and Associates) is available, use that.
    found_cxx=no
    if test -z "$CXX" -o "$CXX" = "KCC"; then
	found_kcc=
	AC_CHECK_PROG(found_kcc, KCC, yes, no)
	if test "$found_kcc" = "yes" ; then
	    found_cxx=yes
	    AC_MSG_WARN([Found KAI C++, using that!])
	    CXX=KCC
	    if test -z "$CXXFLAGS"; then
		if test -z "$with_debug"; then
		    CXXFLAGS="+K0"
		else
		    CXXFLAGS="+K2 -O2"
		fi
	    fi
	fi
    fi

dnl Check for systems where we need extra options for the C++ compiler.
    case "$host_os" in
    irix* )
      if test "$CXX" != "g++" ; then
        CXXFLAGS="$CXXFLAGS -LANG:std=on"
      fi
      ;;
    esac

    AC_LANG_PUSH([C++])

dnl Check if "using namespace std;" works
    AC_MSG_CHECKING([whether $CXX accepts namespace use])
    AC_COMPILE_IFELSE([
#include <iostream>
using namespace std;
],
        [AC_DEFINE(USE_NAMESPACE, [],
                   [Define if C++ compiler accepts using namespace])
	 AC_MSG_RESULT(yes)],
        [AC_MSG_RESULT(no)])

dnl Check for availability of <cmath>
    AC_CHECK_HEADERS(cmath,[],[],[/**/])

dnl Check for systems with broken <cmath> undefining isnan()
    if test "$have_isnan" = yes ; then
      AC_MSG_CHECKING([for broken <cmath> missing definition of isnan])
      AC_COMPILE_IFELSE([
#include <iostream>
#ifdef HAVE_CMATH
#include <cmath>
#else
#include <math.h>
#endif

#ifdef USE_NAMESPACE
using namespace std;
#endif

int
main()
{
  isnan(1.0);
  return 0;
}
],
      [AC_MSG_RESULT(ok)],
      [AC_DEFINE(BROKEN_ISNAN_CXX,[],[isnan is in math.h but not cmath])
       AC_MSG_RESULT(broken)])
    fi

    AC_LANG_POP([C++])

fi

AC_PROG_CXX

AC_SUBST(enable_cxx)

AC_CONFIG_FILES([
    bindings/c++/Makefile
    examples/c++/Makefile
    examples/c++/Makefile.examples
])

AM_CONDITIONAL(enable_cxx, [test "$enable_cxx" = yes])
