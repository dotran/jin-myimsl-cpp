dnl cf/java.ac for PLplot  -*- autoconf -*-
dnl
dnl Java binding
dnl
dnl Copyright (C) 1994, 2004  Maurice LeBrun
dnl Copyright (C) 2002, 2003, 2004  Rafael Laboissiere
dnl Copyright (C) 2002, 2003, 2004  Alan W. Irwin
dnl Copyright (C) 2003, 2004  Joao Cardoso
dnl Copyright (C) 2004, 2005  Andrew Ross
dnl
dnl This file is part of PLplot.
dnl
dnl PLplot is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU Library General Public License as published
dnl by the Free Software Foundation; version 2 of the License.
dnl
dnl PLplot is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU Library General Public License for more details.
dnl
dnl You should have received a copy of the GNU Library General Public License
dnl along with the file PLplot; if not, write to the Free Software
dnl Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

PL_ARG_ENABLE(java, [compile Java interface code], yes)

# ----------------------------------------------------------------------------
# Attempt to find jni.h, if java support is enabled.
# ----------------------------------------------------------------------------

if test "$enable_java" = "yes"; then
    if test "$enable_shared" != "yes"; then
        AC_MSG_WARN([Java support requires enable_shared=yes,])
	AC_MSG_WARN([setting enable_java=no])
        enable_java=no
    fi

fi

# Check for setting of java-home and java-incdir
PL_ARG_WITH(java-home, [User-specified path to the top directory of the java SDK],[])
PL_ARG_WITH(java-incdir, [User-specified path to the java header files],[])

if test "$enable_java" = "yes"; then

    if test -n "$with_java_incdir" ; then
        JAVAINCDIR=$with_java_incdir
    fi

    if test -n "$with_java_home" ; then
        JAVA_HOME=$with_java_home
    fi

    # Check in with_java_home subdirs
    if test -n "$JAVA_HOME" && test -z "$JAVAINCDIR" ; then
        AC_MSG_CHECKING([for jni.h (Java Native Interface) in JAVA_HOME])
        if test -r "$JAVA_HOME/include/jni.h"; then
            JAVAINCDIR="$JAVA_HOME/include"
	    AC_MSG_RESULT(yes)
	else
	    AC_MSG_RESULT(no)
	fi
    fi

    # Check usual search path
    AC_CHECK_HEADERS([jni.h],[jni_in_system=yes],[jni_in_system=no])


    # Let's assume if jni.h is in standard search path then we
    # don't need to look for jni_md.h as well
    # gcj for one does not have a jni_md.h anyway. 
    # We should probably test for this somehow.
    if test -n "$JAVAINCDIR"; then
        AC_MSG_CHECKING([machine dependent include files for Java (J2RE/IBM)])
        # See if machine dependent files exist in JAVAINCDIR (J2RE 1.3.0 IBM)
        if test -r "$JAVA_HOME/include/jni_md.h"; then
            JAVAMDINCDIR="$JAVA_HOME/include"
	    AC_MSG_RESULT(yes)
        else
        # Now we need to find the machine dependent directory.
            case $host_os in
                linux* )
                    JAVAMDINCDIR="$JAVAINCDIR/linux"
		    AC_MSG_RESULT(yes)
                ;;
                solaris* )
                    JAVAMDINCDIR="$JAVAINCDIR/solaris"
		    AC_MSG_RESULT(yes)
                ;;
                * )
                    AC_MSG_RESULT(no)
		    AC_MSG_WARN([Cannot find Java machine dependent includes])
                ;;
            esac
        fi
        if test ! -r "$JAVAMDINCDIR/jni_md.h"; then
            JAVAMDINCDIR="$JAVAINCDIR/genunix"
            if test ! -r "$JAVAMDINCDIR/jni_md.h"; then
                JAVAMDINCDIR=""
            fi
        fi

        if test -z "$JAVAMDINCDIR"; then
            AC_MSG_WARN(Missing jni_md.h, could be gcj?.)
#            AC_MSG_WARN(Missing jni_md.h, disabling Java support.)
#            enable_java=no
        fi

    elif test "$jni_in_system" = no ; then
         AC_MSG_WARN([Java Native Interface include file not found,])
         AC_MSG_WARN([setting enable_java=no])
         enable_java=no
    fi
    
    # Check if Java compiler is present
    AC_CHECK_PROGS(JAVAC, javac, no)
    if test "$JAVAC" = no ; then
         AC_MSG_WARN([javac command not found,])
         AC_MSG_WARN([setting enable_java=no])
         enable_java=no
    fi

    # Check if jar command is present
    AC_CHECK_PROGS(JAR, jar, no)
    if test "$JAR" = no ; then
         AC_MSG_WARN([jar command not found,])
         AC_MSG_WARN([setting enable_java=no])
         enable_java=no
    fi

fi

if test "$enable_java" = yes; then
### Java stanza completely different from others.  sysloc.in must have
### found both $JAVAINCDIR and $JAVAMDINCDIR if $enable_java is still yes.
   if test -n "$JAVAMDINCDIR"; then
       JAVAINCCMD="-I$JAVAINCDIR -I$JAVAMDINCDIR"
   elif test -n "$JAVAINCDIR" ; then
       JAVAINCCMD="-I$JAVAINCDIR"
   fi
### Directory for Java wrapper library.
   test -z "$JAVAWRAPPER_DIR" && JAVAWRAPPER_DIR="$LIB_DIR/jni"
### Directory for Java bindings .jar file
   test -z "$JAVADATA_DIR" && JAVADATA_DIR="$datadir/java"

### bindings/java/config.java.in requires JAVAWRAPPER_HARDDIR
### The symbolic exec_prefix must be replaced by the actual exec_prefix.
   PL_EXPAND_EXPRESSION(JAVAWRAPPER_HARDDIR, $JAVAWRAPPER_DIR)
### bindings/java/config.java.in needs the complete name of the
### plplotjavac_wrap DLL.
   PL_GET_DLLNAME([plplotjavac_wrap], [PLPLOTJAVAC_WRAP_DLL])
### examples/java/Makefile.examples.in requires JAVADATA_HARDDIR
### The symbolic exec_prefix must be replaced by the actual exec_prefix.
   PL_EXPAND_EXPRESSION(JAVADATA_HARDDIR, $JAVADATA_DIR)
fi

AC_SUBST(JAVAINCCMD)
AC_SUBST(enable_java)
AC_SUBST(JAVAWRAPPER_DIR)
AC_SUBST(JAVAWRAPPER_HARDDIR)
AC_SUBST(JAVADATA_HARDDIR)
AC_SUBST(PLPLOTJAVAC_WRAP_DLL)

AM_CONDITIONAL(enable_java, [test "$enable_java" = yes])

AC_CONFIG_FILES([
    bindings/java/Makefile
    bindings/java/config.java
    examples/java/Makefile
    examples/java/Makefile.examples
])
